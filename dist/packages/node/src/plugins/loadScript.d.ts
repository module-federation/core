declare const _default: string;
export default _default;
export declare const executeLoadTemplate = "\n  function executeLoad(url, callback, name) {\n    if(!name) {\n      throw new Error('__webpack_require__.l name is required for ' + url);\n    }\n\n    if (typeof global.__remote_scope__[name] !== 'undefined') return callback(global.__remote_scope__[name]);\n    const vm = require('vm');\n    (global.webpackChunkLoad || global.fetch || require(\"node-fetch\"))(url).then(function (res) {\n      return res.text();\n    }).then(function (scriptContent) {\n      try {\n        // TODO: remove conditional in v7, this is to prevent breaking change between v6.0.x and v6.1.x\n        const vmContext = typeof URLSearchParams === 'undefined' ?{exports, require, module, global, __filename, __dirname, URL, URLSearchParams, console, process,Buffer, ...global, remoteEntryName: name}:\n          {exports, require, module, global, __filename, __dirname, URL, URLSearchParams, console, process,Buffer, ...global, remoteEntryName: name};\n        const remote = vm.runInNewContext(scriptContent + '\\nmodule.exports', vmContext, {filename: 'node-federation-loader-' + name + '.vm'});\n        const foundContainer = remote[name] || remote\n\n        if(!global.__remote_scope__[name]) {\n          global.__remote_scope__[name] = foundContainer;\n          global.__remote_scope__._config[name] = url;\n        }\n        callback(global.__remote_scope__[name]);\n      } catch (e) {\n        console.error('executeLoad hit catch block');\n        e.target = {src: url};\n        callback(e);\n      }\n    }).catch((e) => {\n      e.target = {src: url};\n      callback(e);\n    });\n  }\n";
