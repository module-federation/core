declare const _default: "\nfunction promiseState(p) {\n  var t = {};\n  return Promise.race([p, t]).then(function (v) {\n    return v === t ? \"pending\" : \"fulfilled\";\n  }, function () {\n    return \"rejected\";\n  });\n}\nfunction cleanInitArrays(array) {\n  array.forEach(function (item, index) {\n    promiseState(item).then(function (status) {\n      if (status === 'fulfilled') {\n        array.splice(index, 1);\n      }\n    });\n  });\n}\n\nfunction asyncOperation(originalPush) {\n  __webpack_require__.checkAsyncReqs();\n  return Promise.all(__webpack_require__.initConsumes).then(function(){\n    return Promise.all(__webpack_require__.initRemotes)\n  }).then(function () {\n    for (let q in chunkQueue) {\n     if(__webpack_require__.getEagerSharedForChunkId) {__webpack_require__.getEagerSharedForChunkId(chunkQueue[q][0],__webpack_require__.initConsumes)}\n     if(__webpack_require__.getEagerRemotesForChunkId) {__webpack_require__.getEagerRemotesForChunkId(chunkQueue[q][0],__webpack_require__.initRemotes)}\n    }\n\n    return Promise.all([\n      Promise.all((function () {\n        return __webpack_require__.initConsumes;\n      })()),\n      Promise.all((function () {\n        return __webpack_require__.initRemotes;\n      })())\n    ]);\n\n  })\n  .then(function () {\n    function runCallback(queueArgs) {\n       Promise.all(__webpack_require__.initConsumes).then(function() {\n        webpackJsonpCallback.apply(null, [null].concat(Array.prototype.slice.call([queueArgs])));\n        originalPush.apply(originalPush, [queueArgs]);\n      });\n    }\n\n    while (chunkQueue.length > 0) {\n     runCallback(chunkQueue.shift());\n    }\n  });\n}\n\nasyncOperation(chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n\nchunkLoadingGlobal.push = (function (originalPush) {\n  return function () {\n    var chunkID = arguments[0][0];\n    if(__webpack_require__.getEagerSharedForChunkId) {__webpack_require__.getEagerSharedForChunkId(chunkID,__webpack_require__.initConsumes)}\n    if(__webpack_require__.getEagerRemotesForChunkId) {__webpack_require__.getEagerRemotesForChunkId(chunkID,__webpack_require__.initRemotes)}\n\n    __webpack_require__.O(null, ['webpack'], function () {\n        if(__webpack_require__.getEagerSharedForChunkId) {__webpack_require__.getEagerSharedForChunkId(chunkID,__webpack_require__.initConsumes)}\n        if(__webpack_require__.getEagerRemotesForChunkId) {__webpack_require__.getEagerRemotesForChunkId(chunkID,__webpack_require__.initRemotes)}\n    },0);\n\n    __webpack_require__.O(null, [chunkID], function () {\n      if(__webpack_require__.getEagerSharedForChunkId) {__webpack_require__.getEagerSharedForChunkId(chunkID,__webpack_require__.initConsumes)}\n      if(__webpack_require__.getEagerRemotesForChunkId) {__webpack_require__.getEagerRemotesForChunkId(chunkID,__webpack_require__.initRemotes)}\n      cleanInitArrays(__webpack_require__.initConsumes);\n      cleanInitArrays(__webpack_require__.initRemotes);\n    },0);\n\n    if (typeof arguments[0][2] === 'function') {\n      chunkTracker = Array.prototype.concat.apply(chunkTracker, arguments[0][0]);\n      var pushEvent = Array.prototype.push.apply(chunkQueue, arguments);\n      return asyncOperation(originalPush);\n    }\n\n    webpackJsonpCallback.apply(\n      null,\n      [null].concat(Array.prototype.slice.call(arguments))\n    );\n    return originalPush.apply(chunkLoadingGlobal, arguments);\n  };\n})(chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n";
export default _default;
