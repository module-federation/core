{"version":3,"sources":["../../../../../packages/typescript/src/lib/Caching.ts"],"sourcesContent":["import fs from 'fs';\nimport { TypesStatsJson } from '../types';\n\nexport class TypesCache {\n  private static fsCache = new Map<string, string[]>();\n\n  private static typesCache = new Map<string, TypesStatsJson>();\n\n  static getFsFiles(directory: string) {\n    // Simple caching mechanism to improve performance reading the file system\n    if (this.fsCache.has(directory)) {\n      return this.fsCache.get(directory);\n    }\n\n    const files = fs.readdirSync(directory);\n    this.fsCache.set(directory, files);\n\n    return files;\n  }\n\n  static getCacheBustedFiles(remote: string, statsJson: TypesStatsJson) {\n    const stats = this.typesCache.get(remote);\n\n    if (!stats) {\n      this.typesCache.set(remote, statsJson);\n    }\n\n    const cachedFiles = stats?.files;\n    const files = statsJson.files;\n\n    const filesToCacheBust: string[] = [];\n    const filesToDelete: string[] = [];\n\n    // No 'cached files' => No types downloaded\n    // Go head and download all the files, no need to cache bust\n    if (!cachedFiles) {\n      return {\n        filesToCacheBust: Object.keys(files),\n        filesToDelete,\n      };\n    }\n\n    Object.entries(cachedFiles).forEach(([filename, hash]) => {\n      const remoteFileHash = files[filename];\n\n      if (remoteFileHash) {\n        if (remoteFileHash !== hash) {\n          filesToCacheBust.push(filename);\n        }\n      } else {\n        filesToDelete.push(filename);\n      }\n    });\n\n    return {\n      filesToCacheBust,\n      filesToDelete,\n    };\n  }\n}\n"],"names":["TypesCache","getFsFiles","directory","fsCache","has","get","files","fs","readdirSync","set","getCacheBustedFiles","remote","statsJson","stats","typesCache","cachedFiles","filesToCacheBust","filesToDelete","Object","keys","entries","forEach","filename","hash","remoteFileHash","push","Map"],"mappings":";;;;+BAGaA;;;eAAAA;;;;6DAHE;AAGR,IAAA,AAAMA,aAAN,MAAMA;IAKX,OAAOC,WAAWC,SAAiB,EAAE;QACnC,0EAA0E;QAC1E,IAAI,IAAI,CAACC,OAAO,CAACC,GAAG,CAACF,YAAY;YAC/B,OAAO,IAAI,CAACC,OAAO,CAACE,GAAG,CAACH;QAC1B,CAAC;QAED,MAAMI,QAAQC,WAAE,CAACC,WAAW,CAACN;QAC7B,IAAI,CAACC,OAAO,CAACM,GAAG,CAACP,WAAWI;QAE5B,OAAOA;IACT;IAEA,OAAOI,oBAAoBC,MAAc,EAAEC,SAAyB,EAAE;QACpE,MAAMC,QAAQ,IAAI,CAACC,UAAU,CAACT,GAAG,CAACM;QAElC,IAAI,CAACE,OAAO;YACV,IAAI,CAACC,UAAU,CAACL,GAAG,CAACE,QAAQC;QAC9B,CAAC;QAED,MAAMG,cAAcF,gBAAAA,KAAAA,IAAAA,MAAOP,KAAK;QAChC,MAAMA,QAAQM,UAAUN,KAAK;QAE7B,MAAMU,mBAA6B,EAAE;QACrC,MAAMC,gBAA0B,EAAE;QAElC,2CAA2C;QAC3C,4DAA4D;QAC5D,IAAI,CAACF,aAAa;YAChB,OAAO;gBACLC,kBAAkBE,OAAOC,IAAI,CAACb;gBAC9BW;YACF;QACF,CAAC;QAEDC,OAAOE,OAAO,CAACL,aAAaM,OAAO,CAAC,CAAC,CAACC,UAAUC,KAAK,GAAK;YACxD,MAAMC,iBAAiBlB,KAAK,CAACgB,SAAS;YAEtC,IAAIE,gBAAgB;gBAClB,IAAIA,mBAAmBD,MAAM;oBAC3BP,iBAAiBS,IAAI,CAACH;gBACxB,CAAC;YACH,OAAO;gBACLL,cAAcQ,IAAI,CAACH;YACrB,CAAC;QACH;QAEA,OAAO;YACLN;YACAC;QACF;IACF;AACF;;IAxDajB,WACIG,UAAU,IAAIuB;;;IADlB1B,WAGIc,aAAa,IAAIY"}