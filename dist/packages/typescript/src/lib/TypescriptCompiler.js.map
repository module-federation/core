{"version":3,"sources":["../../../../../packages/typescript/src/lib/TypescriptCompiler.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport type VueTs from 'vue-tsc';\nimport type { _Program } from 'vue-tsc';\n\nimport ts from 'typescript';\nimport path from 'path';\nimport fs from 'fs';\n\nimport { Logger } from '@module-federation/utilities';\n\nimport {\n  FederatedTypesPluginOptions,\n  ModuleFederationPluginOptions,\n} from '../types';\n\nimport { NormalizeOptions } from './normalizeOptions';\nimport { TypesCache } from './Caching';\n\nlet vueTs: typeof VueTs;\ntry {\n  vueTs = require('vue-tsc');\n} catch {\n  // vue-tsc is an optional dependency.\n}\n\nexport class TypescriptCompiler {\n  private compilerOptions!: ts.CompilerOptions;\n  private tsDefinitionFilesObj: Record<string, string> = {};\n  private logger = Logger.getLogger();\n\n  constructor(private options: NormalizeOptions) {\n    const tsConfigCompilerOptions = this.getTSConfigCompilerOptions();\n\n    this.compilerOptions = {\n      ...tsConfigCompilerOptions,\n      ...options.tsCompilerOptions,\n    };\n  }\n\n  generateDeclarationFiles(\n    exposedComponents: ModuleFederationPluginOptions['exposes'],\n    additionalFilesToCompile: FederatedTypesPluginOptions['additionalFilesToCompile'] = []\n  ) {\n    const exposeSrcToDestMap: Record<string, string> = {};\n\n    const normalizedExposedComponents = this.normalizeFiles(\n      Object.entries(exposedComponents!),\n      ([exposeDest, exposeSrc]) => {\n        const pathWithExt = this.getNormalizedPathWithExt(exposeSrc);\n        exposeSrcToDestMap[pathWithExt] = exposeDest;\n        return pathWithExt;\n      }\n    );\n\n    const normalizedAdditionalFiles = this.normalizeFiles(\n      additionalFilesToCompile,\n      this.getNormalizedPathWithExt.bind(this)\n    );\n\n    const host = this.createHost(exposeSrcToDestMap);\n\n    const rootNames = [\n      ...normalizedAdditionalFiles,\n      ...normalizedExposedComponents,\n    ];\n\n    const program = this.getCompilerProgram({\n      rootNames,\n      options: this.compilerOptions,\n      host,\n    });\n\n    const { diagnostics, emitSkipped } = program.emit();\n\n    if (!emitSkipped) {\n      return this.tsDefinitionFilesObj;\n    }\n\n    diagnostics.forEach(this.reportCompileDiagnostic.bind(this));\n\n    throw new Error('something went wrong generating declaration files');\n  }\n\n  private getCompilerProgram(programOptions: ts.CreateProgramOptions) {\n    const { compiler } = this.options;\n\n    switch (compiler) {\n      case 'vue-tsc':\n        if (!vueTs) {\n          throw new Error(\n            'vue-tsc must be installed when using the vue-tsc compiler option'\n          );\n        }\n        return vueTs.createProgram(programOptions) as _Program;\n      case 'tsc':\n      default:\n        return ts.createProgram(programOptions);\n    }\n  }\n\n  private normalizeFiles<T, U extends string>(\n    files: T[],\n    mapFn: (value: T, index: number, array: T[]) => U\n  ) {\n    return files.map(mapFn).filter((entry) => /\\.tsx?$/.test(entry));\n  }\n\n  private getNormalizedPathWithExt(exposeSrc: string) {\n    const cwd = this.options.webpackCompilerOptions.context || process.cwd();\n\n    const [rootDir, entry] = exposeSrc.split(/\\/(?=[^/]+$)/);\n\n    const normalizedRootDir = path.resolve(cwd, rootDir);\n    const filenameWithExt = this.getFilenameWithExtension(\n      normalizedRootDir,\n      entry\n    );\n\n    const pathWithExt = path.resolve(normalizedRootDir, filenameWithExt);\n    return path.normalize(pathWithExt);\n  }\n\n  private createHost(exposeSrcToDestMap: Record<string, string>) {\n    const host = ts.createCompilerHost(this.compilerOptions);\n\n    const originalWriteFile = host.writeFile;\n\n    host.writeFile = (\n      filepath,\n      text,\n      writeOrderByteMark,\n      onError,\n      sourceFiles,\n      data\n    ) => {\n      this.tsDefinitionFilesObj[filepath] = text;\n      originalWriteFile(\n        filepath,\n        text,\n        writeOrderByteMark,\n        onError,\n        sourceFiles,\n        data\n      );\n\n      // create exports matching the `exposes` config\n      const sourceFilename = path.normalize(sourceFiles?.[0].fileName || '');\n      const exposedDestFilePath = exposeSrcToDestMap[sourceFilename];\n\n      // create reexport file only if the file was marked for exposing\n      if (exposedDestFilePath) {\n        const normalizedExposedDestFilePath = path.resolve(\n          this.options.distDir,\n          `${exposedDestFilePath}.d.ts`\n        );\n\n        const relativePathToCompiledFile = path.relative(\n          path.dirname(normalizedExposedDestFilePath),\n          filepath\n        );\n        // add ./ so it's always relative, remove d.ts because it's not needed and can throw warnings\n        let importPath =\n          './' + relativePathToCompiledFile.replace(/\\.d\\.ts$/, '');\n\n        // If we're on Windows, need to convert \"\\\" to \"/\" in the import path since it\n        // was derived from platform-specific file system path.\n        if (path.sep === '\\\\') {\n          importPath = importPath.replaceAll(path.sep, '/');\n        }\n\n        const reexport = `export * from '${importPath}';\\nexport { default } from '${importPath}';`;\n\n        this.tsDefinitionFilesObj[normalizedExposedDestFilePath] = reexport;\n\n        // reuse originalWriteFile as it creates folders if they don't exist\n        originalWriteFile(\n          normalizedExposedDestFilePath,\n          reexport,\n          writeOrderByteMark\n        );\n      }\n    };\n\n    return host;\n  }\n\n  private reportCompileDiagnostic(diagnostic: ts.Diagnostic): void {\n    const { line } = diagnostic.file!.getLineAndCharacterOfPosition(\n      diagnostic.start!\n    );\n\n    this.logger.log(\n      'TS Error',\n      diagnostic.code,\n      ':',\n      ts.flattenDiagnosticMessageText(diagnostic.messageText, ts.sys.newLine)\n    );\n    this.logger.log(\n      '         at',\n      `${diagnostic.file!.fileName}:${line + 1}`,\n      ts.sys.newLine // '\\n'\n    );\n  }\n\n  private getTSConfigCompilerOptions(): ts.CompilerOptions {\n    const context = this.options.webpackCompilerOptions.context!;\n\n    const tsconfigPath = ts.findConfigFile(\n      context,\n      ts.sys.fileExists,\n      'tsconfig.json'\n    );\n\n    if (!tsconfigPath) {\n      this.logger.error('ERROR: Could not find a valid tsconfig.json');\n      process.exit(1);\n    }\n\n    const readResult = ts.readConfigFile(tsconfigPath, ts.sys.readFile);\n    const configContent = ts.parseJsonConfigFileContent(\n      readResult.config,\n      ts.sys,\n      context\n    );\n\n    return configContent.options;\n  }\n\n  private getFilenameWithExtension(rootDir: string, entry: string) {\n    // Check path exists and it's a directory\n    if (!fs.existsSync(rootDir) || !fs.lstatSync(rootDir).isDirectory()) {\n      throw new Error('rootDir must be a directory');\n    }\n\n    let filename;\n\n    try {\n      // Try to resolve exposed component using index\n      const files = TypesCache.getFsFiles(path.join(rootDir, entry));\n\n      filename = files?.find((file) => file.split('.')[0] === 'index');\n\n      if (!filename) {\n        throw new Error(`filename ${filename} not found`);\n      }\n\n      return `${entry}/${filename}`;\n    } catch (err) {\n      const files = TypesCache.getFsFiles(rootDir);\n\n      // Handle case where directory contains similar filenames\n      // or where a filename like `Component.base.tsx` is used\n      filename = files?.find((file) => {\n        const baseFile = path.basename(file, path.extname(file));\n        const baseEntry = path.basename(entry, path.extname(entry));\n\n        return baseFile === baseEntry;\n      });\n\n      if (!filename) {\n        throw new Error(`filename ${filename} not found`);\n      }\n\n      return filename as string;\n    }\n  }\n}\n"],"names":["TypescriptCompiler","vueTs","require","generateDeclarationFiles","exposedComponents","additionalFilesToCompile","exposeSrcToDestMap","normalizedExposedComponents","normalizeFiles","Object","entries","exposeDest","exposeSrc","pathWithExt","getNormalizedPathWithExt","normalizedAdditionalFiles","bind","host","createHost","rootNames","program","getCompilerProgram","options","compilerOptions","diagnostics","emitSkipped","emit","tsDefinitionFilesObj","forEach","reportCompileDiagnostic","Error","programOptions","compiler","createProgram","ts","files","mapFn","map","filter","entry","test","cwd","webpackCompilerOptions","context","process","rootDir","split","normalizedRootDir","path","resolve","filenameWithExt","getFilenameWithExtension","normalize","createCompilerHost","originalWriteFile","writeFile","filepath","text","writeOrderByteMark","onError","sourceFiles","data","sourceFilename","fileName","exposedDestFilePath","normalizedExposedDestFilePath","distDir","relativePathToCompiledFile","relative","dirname","importPath","replace","sep","replaceAll","reexport","diagnostic","line","file","getLineAndCharacterOfPosition","start","logger","log","code","flattenDiagnosticMessageText","messageText","sys","newLine","getTSConfigCompilerOptions","tsconfigPath","findConfigFile","fileExists","error","exit","readResult","readConfigFile","readFile","configContent","parseJsonConfigFileContent","config","fs","existsSync","lstatSync","isDirectory","filename","TypesCache","getFsFiles","join","find","err","baseFile","basename","extname","baseEntry","constructor","Logger","getLogger","tsConfigCompilerOptions","tsCompilerOptions"],"mappings":"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"}