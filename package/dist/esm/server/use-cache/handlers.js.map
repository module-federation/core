{"version":3,"sources":["../../../src/server/use-cache/handlers.ts"],"sourcesContent":["import DefaultCacheHandler from '../lib/cache-handlers/default'\nimport type { CacheHandlerCompat } from '../lib/cache-handlers/types'\n\nconst debug = process.env.NEXT_PRIVATE_DEBUG_CACHE\n  ? (message: string, ...args: any[]) => {\n      console.log(`use-cache: ${message}`, ...args)\n    }\n  : undefined\n\nconst handlersSymbol = Symbol.for('@next/cache-handlers')\nconst handlersMapSymbol = Symbol.for('@next/cache-handlers-map')\nconst handlersSetSymbol = Symbol.for('@next/cache-handlers-set')\n\n/**\n * The reference to the cache handlers. We store the cache handlers on the\n * global object so that we can access the same instance across different\n * boundaries (such as different copies of the same module).\n */\nconst reference: typeof globalThis & {\n  [handlersSymbol]?: {\n    RemoteCache?: CacheHandlerCompat\n    DefaultCache?: CacheHandlerCompat\n  }\n  [handlersMapSymbol]?: Map<string, CacheHandlerCompat>\n  [handlersSetSymbol]?: Set<CacheHandlerCompat>\n} = globalThis\n\n/**\n * Initialize the cache handlers.\n * @returns `true` if the cache handlers were initialized, `false` if they were already initialized.\n */\nexport function initializeCacheHandlers(): boolean {\n  // If the cache handlers have already been initialized, don't do it again.\n  if (reference[handlersMapSymbol]) {\n    debug?.('cache handlers already initialized')\n    return false\n  }\n\n  debug?.('initializing cache handlers')\n  reference[handlersMapSymbol] = new Map<string, CacheHandlerCompat>()\n\n  // Initialize the cache from the symbol contents first.\n  if (reference[handlersSymbol]) {\n    let fallback: CacheHandlerCompat\n    if (reference[handlersSymbol].DefaultCache) {\n      debug?.('setting \"default\" cache handler from symbol')\n      fallback = reference[handlersSymbol].DefaultCache\n    } else {\n      debug?.('setting \"default\" cache handler from default')\n      fallback = DefaultCacheHandler\n    }\n\n    reference[handlersMapSymbol].set('default', fallback)\n\n    if (reference[handlersSymbol].RemoteCache) {\n      debug?.('setting \"remote\" cache handler from symbol')\n      reference[handlersMapSymbol].set(\n        'remote',\n        reference[handlersSymbol].RemoteCache\n      )\n    } else {\n      debug?.('setting \"remote\" cache handler from default')\n      reference[handlersMapSymbol].set('remote', fallback)\n    }\n  } else {\n    debug?.('setting \"default\" cache handler from default')\n    reference[handlersMapSymbol].set('default', DefaultCacheHandler)\n    debug?.('setting \"remote\" cache handler from default')\n    reference[handlersMapSymbol].set('remote', DefaultCacheHandler)\n  }\n\n  // Create a set of the cache handlers.\n  reference[handlersSetSymbol] = new Set(reference[handlersMapSymbol].values())\n\n  return true\n}\n\n/**\n * Get a cache handler by kind.\n * @param kind - The kind of cache handler to get.\n * @returns The cache handler, or `undefined` if it does not exist.\n * @throws If the cache handlers are not initialized.\n */\nexport function getCacheHandler(kind: string): CacheHandlerCompat | undefined {\n  // This should never be called before initializeCacheHandlers.\n  if (!reference[handlersMapSymbol]) {\n    throw new Error('Cache handlers not initialized')\n  }\n\n  return reference[handlersMapSymbol].get(kind)\n}\n\n/**\n * Get a set iterator over the cache handlers.\n * @returns An iterator over the cache handlers, or `undefined` if they are not\n * initialized.\n */\nexport function getCacheHandlers():\n  | SetIterator<CacheHandlerCompat>\n  | undefined {\n  if (!reference[handlersSetSymbol]) {\n    return undefined\n  }\n\n  return reference[handlersSetSymbol].values()\n}\n\n/**\n * Get a map iterator over the cache handlers (keyed by kind).\n * @returns An iterator over the cache handler entries, or `undefined` if they\n * are not initialized.\n * @throws If the cache handlers are not initialized.\n */\nexport function getCacheHandlerEntries():\n  | MapIterator<[string, CacheHandlerCompat]>\n  | undefined {\n  if (!reference[handlersMapSymbol]) {\n    return undefined\n  }\n\n  return reference[handlersMapSymbol].entries()\n}\n\n/**\n * Set a cache handler by kind.\n * @param kind - The kind of cache handler to set.\n * @param cacheHandler - The cache handler to set.\n */\nexport function setCacheHandler(\n  kind: string,\n  cacheHandler: CacheHandlerCompat\n): void {\n  // This should never be called before initializeCacheHandlers.\n  if (!reference[handlersMapSymbol] || !reference[handlersSetSymbol]) {\n    throw new Error('Cache handlers not initialized')\n  }\n\n  debug?.('setting cache handler for \"%s\"', kind)\n  reference[handlersMapSymbol].set(kind, cacheHandler)\n  reference[handlersSetSymbol].add(cacheHandler)\n}\n"],"names":["DefaultCacheHandler","debug","process","env","NEXT_PRIVATE_DEBUG_CACHE","message","args","console","log","undefined","handlersSymbol","Symbol","for","handlersMapSymbol","handlersSetSymbol","reference","globalThis","initializeCacheHandlers","Map","fallback","DefaultCache","set","RemoteCache","Set","values","getCacheHandler","kind","Error","get","getCacheHandlers","getCacheHandlerEntries","entries","setCacheHandler","cacheHandler","add"],"mappings":"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"}