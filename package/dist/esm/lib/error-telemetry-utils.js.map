{"version":3,"sources":["../../src/lib/error-telemetry-utils.ts"],"sourcesContent":["const ERROR_CODE_DELIMITER = '@'\n\n/**\n * Augments the digest field of errors thrown in React Server Components (RSC) with an error code.\n * Since RSC errors can only be serialized through the digest field, this provides a way to include\n * an additional error code that can be extracted client-side via `extractNextErrorCode`.\n *\n * The error code is appended to the digest string with a semicolon separator, allowing it to be\n * parsed out later while preserving the original digest value.\n */\nexport const createDigestWithErrorCode = (\n  thrownValue: unknown,\n  originalDigest: string\n): string => {\n  if (\n    typeof thrownValue === 'object' &&\n    thrownValue !== null &&\n    '__NEXT_ERROR_CODE' in thrownValue\n  ) {\n    return `${originalDigest}${ERROR_CODE_DELIMITER}${thrownValue.__NEXT_ERROR_CODE}`\n  }\n  return originalDigest\n}\n\n/**\n * Copies the error code from one error to another by setting the __NEXT_ERROR_CODE property.\n * This allows error codes to be preserved when wrapping or transforming errors.\n */\nexport const copyNextErrorCode = (source: unknown, target: unknown): void => {\n  const errorCode = extractNextErrorCode(source)\n  if (errorCode && typeof target === 'object' && target !== null) {\n    Object.defineProperty(target, '__NEXT_ERROR_CODE', {\n      value: errorCode,\n      enumerable: false,\n      configurable: true,\n    })\n  }\n}\n\nexport const extractNextErrorCode = (error: unknown): string | undefined => {\n  if (\n    typeof error === 'object' &&\n    error !== null &&\n    '__NEXT_ERROR_CODE' in error &&\n    typeof error.__NEXT_ERROR_CODE === 'string'\n  ) {\n    return error.__NEXT_ERROR_CODE\n  }\n\n  if (\n    typeof error === 'object' &&\n    error !== null &&\n    'digest' in error &&\n    typeof error.digest === 'string'\n  ) {\n    const segments = error.digest.split(ERROR_CODE_DELIMITER)\n    const errorCode = segments.find((segment) => segment.startsWith('E'))\n    return errorCode\n  }\n\n  return undefined\n}\n"],"names":["ERROR_CODE_DELIMITER","createDigestWithErrorCode","thrownValue","originalDigest","__NEXT_ERROR_CODE","copyNextErrorCode","source","target","errorCode","extractNextErrorCode","Object","defineProperty","value","enumerable","configurable","error","digest","segments","split","find","segment","startsWith","undefined"],"mappings":"AAAA,MAAMA,uBAAuB;AAE7B;;;;;;;CAOC,GACD,OAAO,MAAMC,4BAA4B,CACvCC,aACAC;IAEA,IACE,OAAOD,gBAAgB,YACvBA,gBAAgB,QAChB,uBAAuBA,aACvB;QACA,OAAO,GAAGC,iBAAiBH,uBAAuBE,YAAYE,iBAAiB,EAAE;IACnF;IACA,OAAOD;AACT,EAAC;AAED;;;CAGC,GACD,OAAO,MAAME,oBAAoB,CAACC,QAAiBC;IACjD,MAAMC,YAAYC,qBAAqBH;IACvC,IAAIE,aAAa,OAAOD,WAAW,YAAYA,WAAW,MAAM;QAC9DG,OAAOC,cAAc,CAACJ,QAAQ,qBAAqB;YACjDK,OAAOJ;YACPK,YAAY;YACZC,cAAc;QAChB;IACF;AACF,EAAC;AAED,OAAO,MAAML,uBAAuB,CAACM;IACnC,IACE,OAAOA,UAAU,YACjBA,UAAU,QACV,uBAAuBA,SACvB,OAAOA,MAAMX,iBAAiB,KAAK,UACnC;QACA,OAAOW,MAAMX,iBAAiB;IAChC;IAEA,IACE,OAAOW,UAAU,YACjBA,UAAU,QACV,YAAYA,SACZ,OAAOA,MAAMC,MAAM,KAAK,UACxB;QACA,MAAMC,WAAWF,MAAMC,MAAM,CAACE,KAAK,CAAClB;QACpC,MAAMQ,YAAYS,SAASE,IAAI,CAAC,CAACC,UAAYA,QAAQC,UAAU,CAAC;QAChE,OAAOb;IACT;IAEA,OAAOc;AACT,EAAC"}