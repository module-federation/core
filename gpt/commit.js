"diff --git a/gpt/git-tools.js b/gpt/git-tools.js\nindex f3696bd5..809f099d 100644\n--- a/gpt/git-tools.js\n+++ b/gpt/git-tools.js\n@@ -10,15 +10,15 @@ const {  InputValues, PartialValues, AgentStep, AgentAction, AgentFinish } = req\n const { Calculator } = require(\"langchain/tools/calculator\");\n const { BufferWindowMemory } = require(\"langchain/memory\");\n const path = require('path')\n \n const formatInstructions = (\n   toolNames\n ) => `\n-  Use the following format in your response, you must respond with a commit title, body, and footer. Include detailed changed in each file:\n+  Use the following format in your response, you must respond with a commit title, body. If there is no meaningful change, then you should not commit anything.\n \n   Question: the input question you must answer\n   Thought: you should always think about what to do\n   Action: the action to take, should be one of [${toolNames}]\n   Action Input: the input to the action\n   Observation: the result of the action\n   ... (this Thought/Action/Action Input/Observation can repeat N times)\n@@ -42,14 +42,18 @@ class GitCommitPromptTemplate extends BaseStringPromptTemplate {\n   }\n   async processFile(file) {\n     console.log('process file');\n     const fileName = file.match(/(?<=diff --git a\\/).*?(?= b\\/)/)\n     console.log('fileName', fileName?.[0] || file);\n     console.log(file.length)\n   \n+    if(!fileName?.[0]) {\n+      console.log('no filename', fileName)\n+      return ''\n+    }\n     // recursiveAgent(\"write commit message for this code change:\", file)\n     // Use the AI agent to generate a commit message for this file\n     // This is a placeholder implementation, replace it with your actual implementation\n     const commitMessage = await recursiveAgent(\"Write commit message for this codechange \\n\\n\" + file);\n     return commitMessage;\n   }\n   async format(input) {\n@@ -67,15 +71,15 @@ class GitCommitPromptTemplate extends BaseStringPromptTemplate {\n     // const files = lastStep.observation.split(/(?=diff --git)/);\n     const lastStep = intermediateSteps[intermediateSteps.length - 1];\n \n     // console.log(input)\n     let files\n     if(lastStep) {\n       files = lastStep.observation.split(/(?=diff --git)/);\n-      console.log('files',files)\n+      console.log('files',lastStep)\n       files = await Promise.all(files.map(file => this.processFile(file)));\n     }\n     const agentScratchpad = intermediateSteps.reduce(\n       (thoughts, { action, observation }) => {\n         const newThought = [action.log, `\\nObservation: ${observation}`, \"Thought:\"].join(\"\\n\");\n         return thoughts.includes(newThought) ? thoughts : thoughts + newThought;\n       },\n@@ -143,15 +147,18 @@ console.log(\"DIFFFFF\", diff)\n         diff.length,\n         'to:',\n         diff.length,\n         `(-U flag now ${maxUFlag})`\n       );\n     }\n \n-    return diff;\n+    if (diff.length < 5) {\n+        return null;\n+    }\n+    return undefined;\n   }\n \n // Get the diff of staged files\n /**\n  * @class\n  * @extends {GitTool}\n  * @description GitDiffStagedTool class for getting the diff of staged files\n@@ -176,15 +183,21 @@ class GitDiffStagedTool extends GitTool {\n    * @method\n    * @description Returns the diff of staged changes\n    * @returns {string} The diff of staged changes\n    */\n   async _call() {\n     console.log('staged diff')\n     // const message = this.runGitCommand('diff --cached');\n-    const diff = getDiff()\n+    const diff = getDiff();\n+    if (diff === undefined) {\n+      console.log('No meaningful changes in git diff. Aborting agent.');\n+      const abortController = new AbortController();\n+      abortController.abort(); // trigger the abort signal\n+      return;\n+    }\n     console.log('running diff')\n     console.log(\"diff\",diff)\n      const files = diff.split(/(?=diff --git)/);\n     //  console.log(files[1])\n     return diff\n   }\n \n@@ -468,23 +481,24 @@ class GitDeleteBranchTool extends GitTool {\n async function recursiveAgent(input) {\n     const model = new OpenAIChat({ temperature: 0.5, modelName: 'gpt-4', maxTokens: 7000, maxConcurrency: 40 });\n     const tools = [\n       new Calculator(),\n       new GitAddTool({repoPath: process.cwd()}),\n       new GitBranchListTool({repoPath: process.cwd()}),\n       new GitCheckoutBranchTool({repoPath: process.cwd()}),\n-      new GitCommitTool({repoPath: process.cwd()}),\n+      // new GitCommitTool({repoPath: process.cwd()}),\n       new GitDeleteBranchTool({repoPath: process.cwd()}),\n       new GitDiffStagedTool({repoPath: process.cwd()}),\n     //   new GitTools.GitDiffTool({repoPath: process.cwd()}),\n     //   new GitTools.GitNewBranchTool({repoPath: process.cwd()}),\n     //   new GitTools.GitPullTool({repoPath: process.cwd()}),\n     //   new GitTools.GitPushTool({repoPath: process.cwd()}),\n     //   new GitTools.GitStatusTool({repoPath: process.cwd()}),\n     ];\n+    \n \n \n \n \n     const llmChain = new LLMChain({\n       prompt: new GitCommitPromptTemplate({\n         tools,\n"
