/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra and Zackary Jackson @ScriptedAlchemy
*/

'use strict';
import type { Compiler } from 'webpack';
import { isRequiredVersion } from '@module-federation/sdk';
import { parseOptions } from '../container/options';
import ConsumeSharedPlugin from './ConsumeSharedPlugin';
import ProvideSharedPlugin from './ProvideSharedPlugin';
import type {
  SharePluginOptions,
  SharedConfig,
} from '../../declarations/plugins/sharing/SharePlugin';
import type { ConsumesConfig } from '../../declarations/plugins/sharing/ConsumeSharedPlugin';
import type { ProvidesConfig } from '../../declarations/plugins/sharing/ProvideSharedPlugin';
import { getWebpackPath } from '@module-federation/sdk/normalize-webpack-path';
import { createSchemaValidation } from '../../utils';

const validate = createSchemaValidation(
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  require('../../schemas/sharing/SharePlugin.check.js').validate,
  () => require('../../schemas/sharing/SharePlugin').default,
  {
    name: 'Share Plugin',
    baseDataPath: 'options',
  },
);

class SharePlugin {
  private _shareScope: string | string[];
  private _consumes: Record<string, ConsumesConfig>[];
  private _provides: Record<string, ProvidesConfig>[];
  private _options: SharePluginOptions;

  constructor(options: SharePluginOptions) {
    validate(options);

    this._options = options;

    const sharedOptions: [string, SharedConfig][] = parseOptions(
      options.shared,
      (item, key) => {
        if (typeof item !== 'string')
          throw new Error(
            `Unexpected array in shared configuration for key "${key}"`,
          );
        const config: SharedConfig =
          item === key || !isRequiredVersion(item)
            ? {
                import: item,
              }
            : {
                import: key,
                requiredVersion: item,
              };
        return config;
      },
      (item) => item,
    );
    const consumes: Record<string, ConsumesConfig>[] = sharedOptions.map(
      ([key, options]) => ({
        [key]: {
          import: options.import,
          shareKey: options.shareKey || key,
          shareScope: options.shareScope,
          requiredVersion: options.requiredVersion,
          strictVersion: options.strictVersion,
          singleton: options.singleton,
          packageName: options.packageName,
          eager: options.eager,
          issuerLayer: options.issuerLayer,
          layer: options.layer,
          request: options.request || key,
          exclude: options.exclude,
          include: options.include,
          nodeModulesReconstructedLookup:
            options.nodeModulesReconstructedLookup,
        },
      }),
    );
    const provides: Record<string, ProvidesConfig>[] = sharedOptions
      .filter(([, options]) => options.import !== false)
      .map(([key, options]) => ({
        [options.import || key]: {
          shareKey: options.shareKey || key,
          shareScope: options.shareScope,
          version: options.version,
          eager: options.eager,
          requiredVersion: options.requiredVersion,
          strictVersion: options.strictVersion,
          singleton: options.singleton,
          layer: options.layer,
          request: options.request || options.import || key,
          exclude: options.exclude,
          include: options.include,
          nodeModulesReconstructedLookup:
            options.nodeModulesReconstructedLookup,
        },
      }));

    // Validate that at least one shared module is configured
    if (sharedOptions.length === 0) {
      throw new Error(
        'SharePlugin requires at least one shared module configuration',
      );
    }

    this._shareScope = options.shareScope || 'default';
    this._consumes = consumes;
    this._provides = provides;
  }

  /**
   * Get the configuration used to initialize this plugin
   * @returns The original SharePluginOptions
   */
  getOptions(): SharePluginOptions {
    return this._options;
  }

  /**
   * Get the share scope name(s) used by this plugin
   * @returns The share scope name or array of names
   */
  getShareScope(): string | string[] {
    return this._shareScope;
  }

  /**
   * Get the consume configurations generated by this plugin
   * @returns Array of consume configurations
   */
  getConsumes(): Record<string, ConsumesConfig>[] {
    return this._consumes;
  }

  /**
   * Get the provide configurations generated by this plugin
   * @returns Array of provide configurations
   */
  getProvides(): Record<string, ProvidesConfig>[] {
    return this._provides;
  }

  /**
   * Get information about shared modules
   * @returns Object containing shared module information
   */
  getSharedInfo(): {
    totalShared: number;
    consumeOnly: number;
    provideAndConsume: number;
    shareScopes: string[];
  } {
    const consumeOnlyCount = this._consumes.length - this._provides.length;
    const provideAndConsumeCount = this._provides.length;
    const shareScopes = Array.isArray(this._shareScope)
      ? this._shareScope
      : [this._shareScope];

    return {
      totalShared: this._consumes.length,
      consumeOnly: consumeOnlyCount,
      provideAndConsume: provideAndConsumeCount,
      shareScopes: shareScopes,
    };
  }

  /**
   * Applies the plugin to the webpack compiler instance
   * @param compiler - The webpack compiler instance
   */
  apply(compiler: Compiler): void {
    process.env['FEDERATION_WEBPACK_PATH'] =
      process.env['FEDERATION_WEBPACK_PATH'] || getWebpackPath(compiler);

    // Apply ConsumeSharedPlugin with enhanced error handling
    try {
      new ConsumeSharedPlugin({
        shareScope: this._shareScope,
        consumes: this._consumes,
      }).apply(compiler);
    } catch (error) {
      const message = error instanceof Error ? error.message : String(error);
      throw new Error(`Failed to apply ConsumeSharedPlugin: ${message}`);
    }

    // Apply ProvideSharedPlugin with enhanced error handling
    try {
      new ProvideSharedPlugin({
        shareScope: this._shareScope,
        provides: this._provides,
      }).apply(compiler);
    } catch (error) {
      const message = error instanceof Error ? error.message : String(error);
      throw new Error(`Failed to apply ProvideSharedPlugin: ${message}`);
    }
  }
}

export default SharePlugin;
