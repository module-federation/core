ec0d0117ffdee1206f87e78d06da81aa
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MFDataPrefetch", {
    enumerable: true,
    get: function() {
        return MFDataPrefetch;
    }
});
const _runtime = require("@module-federation/runtime");
const _sdk = require("@module-federation/sdk");
const _runtimeutils = require("./common/runtime-utils");
// @ts-ignore init global variable for test
globalThis.__FEDERATION__ ??= {};
globalThis.__FEDERATION__.__PREFETCH__ ??= {
    entryLoading: {},
    instance: new Map(),
    __PREFETCH_EXPORTS__: {}
};
class MFDataPrefetch {
    prefetchMemory;
    recordOutdate;
    _exports;
    _options;
    constructor(options){
        this.prefetchMemory = new Map();
        this.recordOutdate = {};
        this._exports = {};
        this._options = options;
        this.global.instance.set(options.name, this);
    }
    get global() {
        return globalThis.__FEDERATION__.__PREFETCH__;
    }
    static getInstance(id) {
        return globalThis.__FEDERATION__.__PREFETCH__.instance.get(id);
    }
    async loadEntry(entry) {
        const { name, remoteSnapshot, remote, origin } = this._options;
        if (entry) {
            const { buildVersion, globalName } = remoteSnapshot;
            const uniqueKey = globalName || `${name}:${buildVersion}`;
            if (!this.global.entryLoading[uniqueKey]) {
                this.global.entryLoading[uniqueKey] = (0, _sdk.loadScript)(entry, {});
            }
            return this.global.entryLoading[uniqueKey];
        } else {
            const remoteInfo = (0, _runtime.getRemoteInfo)(remote);
            const module = origin.moduleCache.get(remoteInfo.name);
            return (0, _runtime.getRemoteEntry)({
                origin: origin,
                remoteInfo,
                remoteEntryExports: module ? module.remoteEntryExports : undefined
            });
        }
    }
    getProjectExports() {
        if (Object.keys(this._exports).length > 0) {
            return this._exports;
        }
        const { name } = this._options;
        const exportsPromise = globalThis.__FEDERATION__.__PREFETCH__.__PREFETCH_EXPORTS__?.[name];
        const resolve = exportsPromise.then((exports1 = {})=>{
            // Match prefetch based on the function name suffix so that other capabilities can be expanded later.
            // Not all functions should be directly identified as prefetch functions
            const memory = {};
            Object.keys(exports1).forEach((key)=>{
                memory[key] = {};
                const exportVal = exports1[key];
                Object.keys(exportVal).reduce((memo, current)=>{
                    if (current.toLocaleLowerCase().endsWith('prefetch') || current.toLocaleLowerCase() === 'default') {
                        memo[current] = exportVal[current];
                    }
                    return memo;
                }, memory[key]);
            });
            this.memorizeExports(memory);
        });
        return resolve;
    }
    memorizeExports(exports1) {
        this._exports = exports1;
    }
    getExposeExports(id) {
        const prefetchId = (0, _runtimeutils.getPrefetchId)(id);
        const compatId = (0, _runtimeutils.compatGetPrefetchId)(id);
        const prefetchExports = this._exports[prefetchId] || this._exports[compatId];
        return prefetchExports || {};
    }
    prefetch(prefetchOptions) {
        const { id, functionId = 'default', refetchParams } = prefetchOptions;
        let prefetchResult;
        const prefetchId = (0, _runtimeutils.getPrefetchId)(id);
        const compatId = (0, _runtimeutils.compatGetPrefetchId)(id);
        const memorizeId = id + functionId;
        const memory = this.prefetchMemory.get(memorizeId);
        if (!this.checkOutdate(prefetchOptions) && memory) {
            return memory;
        }
        const prefetchExports = this._exports[prefetchId] || this._exports[compatId];
        if (!prefetchExports) {
            return;
        }
        const executePrefetch = prefetchExports[functionId];
        if (typeof executePrefetch === 'function') {
            if (refetchParams) {
                prefetchResult = executePrefetch(refetchParams);
            } else {
                prefetchResult = executePrefetch();
            }
        } else {
            throw new Error(`[Module Federation Data Prefetch]: No prefetch function called ${functionId} export in prefetch file`);
        }
        this.memorize(memorizeId, prefetchResult);
        return prefetchResult;
    }
    memorize(id, value) {
        this.prefetchMemory.set(id, value);
    }
    markOutdate(markOptions, isOutdate) {
        const { id, functionId = 'default' } = markOptions;
        if (!this.recordOutdate[id]) {
            this.recordOutdate[id] = {};
        }
        this.recordOutdate[id][functionId] = isOutdate;
    }
    checkOutdate(outdateOptions) {
        const { id, functionId = 'default', cacheStrategy } = outdateOptions;
        if (typeof cacheStrategy === 'function') {
            return cacheStrategy();
        }
        if (!this.recordOutdate[id]) {
            this.recordOutdate[id] = {};
        }
        if (this.recordOutdate[id][functionId]) {
            this.markOutdate({
                id,
                functionId
            }, false);
            return true;
        } else {
            return false;
        }
    }
}

//# sourceMappingURL=data:application/json;base64,