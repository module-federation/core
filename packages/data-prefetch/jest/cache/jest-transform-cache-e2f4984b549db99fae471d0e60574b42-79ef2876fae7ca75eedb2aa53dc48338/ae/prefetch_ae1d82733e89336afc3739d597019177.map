{"version":3,"sources":["/Users/bytedance/WebstormProjects/universe/packages/data-prefetch/src/prefetch.ts"],"sourcesContent":["import {\n  FederationHost,\n  getRemoteEntry,\n  getRemoteInfo,\n} from '@module-federation/runtime';\nimport {\n  loadScript,\n  ModuleInfo,\n  ProviderModuleInfo,\n} from '@module-federation/sdk';\nimport { Remote } from '@module-federation/runtime/types';\n\nimport { getPrefetchId, compatGetPrefetchId } from './common/runtime-utils';\n\ndeclare module '@module-federation/runtime' {\n  export interface Federation {\n    __PREFETCH__: {\n      entryLoading: Record<string, undefined | Promise<void>>;\n      instance: Map<string, MFDataPrefetch>;\n      __PREFETCH_EXPORTS__: Record<string, Promise<Record<string, any>>>;\n    };\n  }\n}\n\ntype PrefetchExports = Record<string, any>;\n\nexport interface DataPrefetchOptions {\n  name: string;\n  remote?: Remote;\n  origin?: FederationHost;\n  remoteSnapshot?: ModuleInfo;\n}\n\nexport interface prefetchOptions {\n  id: string;\n  functionId?: string;\n  cacheStrategy?: () => boolean;\n  refetchParams?: any;\n}\n\n// @ts-ignore init global variable for test\nglobalThis.__FEDERATION__ ??= {};\nglobalThis.__FEDERATION__.__PREFETCH__ ??= {\n  entryLoading: {},\n  instance: new Map(),\n  __PREFETCH_EXPORTS__: {},\n};\nexport class MFDataPrefetch {\n  public prefetchMemory: Map<string, Promise<any>>;\n  public recordOutdate: Record<string, Record<string, boolean>>;\n  private _exports: Record<string, any>;\n  private _options: DataPrefetchOptions;\n\n  constructor(options: DataPrefetchOptions) {\n    this.prefetchMemory = new Map();\n    this.recordOutdate = {};\n    this._exports = {};\n    this._options = options;\n    this.global.instance.set(options.name, this);\n  }\n\n  get global(): Record<string, any> {\n    return globalThis.__FEDERATION__.__PREFETCH__;\n  }\n\n  static getInstance(id: string): MFDataPrefetch | undefined {\n    return globalThis.__FEDERATION__.__PREFETCH__.instance.get(id);\n  }\n\n  async loadEntry(entry: string | undefined): Promise<any> {\n    const { name, remoteSnapshot, remote, origin } = this._options;\n\n    if (entry) {\n      const { buildVersion, globalName } = remoteSnapshot as ProviderModuleInfo;\n      const uniqueKey = globalName || `${name}:${buildVersion}`;\n\n      if (!this.global.entryLoading[uniqueKey]) {\n        this.global.entryLoading[uniqueKey] = loadScript(entry, {});\n      }\n      return this.global.entryLoading[uniqueKey];\n    } else {\n      const remoteInfo = getRemoteInfo(remote as Remote);\n      const module = origin!.moduleCache.get(remoteInfo.name);\n      return getRemoteEntry({\n        origin: origin!,\n        remoteInfo,\n        remoteEntryExports: module ? module.remoteEntryExports : undefined,\n      });\n    }\n  }\n\n  getProjectExports() {\n    if (Object.keys(this._exports).length > 0) {\n      return this._exports;\n    }\n    const { name } = this._options;\n    const exportsPromise =\n      globalThis.__FEDERATION__.__PREFETCH__.__PREFETCH_EXPORTS__?.[name];\n    const resolve = exportsPromise.then(\n      (exports: Record<string, Record<string, any>> = {}) => {\n        // Match prefetch based on the function name suffix so that other capabilities can be expanded later.\n        // Not all functions should be directly identified as prefetch functions\n        const memory: Record<string, Record<string, any>> = {};\n        Object.keys(exports).forEach((key) => {\n          memory[key] = {};\n          const exportVal = exports[key];\n          Object.keys(exportVal).reduce(\n            (memo: Record<string, any>, current: string) => {\n              if (\n                current.toLocaleLowerCase().endsWith('prefetch') ||\n                current.toLocaleLowerCase() === 'default'\n              ) {\n                memo[current] = exportVal[current];\n              }\n              return memo;\n            },\n            memory[key],\n          );\n        });\n        this.memorizeExports(memory);\n      },\n    );\n    return resolve;\n  }\n\n  memorizeExports(exports: Record<string, any>): void {\n    this._exports = exports;\n  }\n\n  getExposeExports(id: string): PrefetchExports {\n    const prefetchId = getPrefetchId(id);\n    const compatId = compatGetPrefetchId(id);\n    const prefetchExports =\n      this._exports[prefetchId] || (this._exports[compatId] as PrefetchExports);\n    return prefetchExports || {};\n  }\n\n  prefetch(prefetchOptions: prefetchOptions): any {\n    const { id, functionId = 'default', refetchParams } = prefetchOptions;\n    let prefetchResult;\n    const prefetchId = getPrefetchId(id);\n    const compatId = compatGetPrefetchId(id);\n    const memorizeId = id + functionId;\n    const memory = this.prefetchMemory.get(memorizeId);\n    if (!this.checkOutdate(prefetchOptions) && memory) {\n      return memory;\n    }\n\n    const prefetchExports =\n      this._exports[prefetchId] || (this._exports[compatId] as PrefetchExports);\n    if (!prefetchExports) {\n      return;\n    }\n    const executePrefetch = prefetchExports[functionId];\n    if (typeof executePrefetch === 'function') {\n      if (refetchParams) {\n        prefetchResult = executePrefetch(refetchParams);\n      } else {\n        prefetchResult = executePrefetch();\n      }\n    } else {\n      throw new Error(\n        `[Module Federation Data Prefetch]: No prefetch function called ${functionId} export in prefetch file`,\n      );\n    }\n    this.memorize(memorizeId, prefetchResult);\n    return prefetchResult;\n  }\n\n  memorize(id: string, value: any): void {\n    this.prefetchMemory.set(id, value);\n  }\n\n  markOutdate(\n    markOptions: Omit<prefetchOptions, 'cacheStrategy'>,\n    isOutdate: boolean,\n  ): void {\n    const { id, functionId = 'default' } = markOptions;\n    if (!this.recordOutdate[id]) {\n      this.recordOutdate[id] = {};\n    }\n    this.recordOutdate[id][functionId] = isOutdate;\n  }\n\n  checkOutdate(outdateOptions: prefetchOptions): boolean {\n    const { id, functionId = 'default', cacheStrategy } = outdateOptions;\n    if (typeof cacheStrategy === 'function') {\n      return cacheStrategy();\n    }\n\n    if (!this.recordOutdate[id]) {\n      this.recordOutdate[id] = {};\n    }\n    if (this.recordOutdate[id][functionId]) {\n      this.markOutdate(\n        {\n          id,\n          functionId,\n        },\n        false,\n      );\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n"],"names":["MFDataPrefetch","globalThis","__FEDERATION__","__PREFETCH__","entryLoading","instance","Map","__PREFETCH_EXPORTS__","prefetchMemory","recordOutdate","_exports","_options","constructor","options","global","set","name","getInstance","id","get","loadEntry","entry","remoteSnapshot","remote","origin","buildVersion","globalName","uniqueKey","loadScript","remoteInfo","getRemoteInfo","module","moduleCache","getRemoteEntry","remoteEntryExports","undefined","getProjectExports","Object","keys","length","exportsPromise","resolve","then","exports","memory","forEach","key","exportVal","reduce","memo","current","toLocaleLowerCase","endsWith","memorizeExports","getExposeExports","prefetchId","getPrefetchId","compatId","compatGetPrefetchId","prefetchExports","prefetch","prefetchOptions","functionId","refetchParams","prefetchResult","memorizeId","checkOutdate","executePrefetch","Error","memorize","value","markOutdate","markOptions","isOutdate","outdateOptions","cacheStrategy"],"mappings":"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"}