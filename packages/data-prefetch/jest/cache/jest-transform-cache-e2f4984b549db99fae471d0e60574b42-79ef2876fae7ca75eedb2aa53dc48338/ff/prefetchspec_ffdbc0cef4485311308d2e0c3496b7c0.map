{"version":3,"sources":["/Users/bytedance/WebstormProjects/universe/packages/data-prefetch/__tests__/prefetch.spec.ts"],"sourcesContent":["// Import the necessary modules and functions\nimport { MFDataPrefetch } from '../src/prefetch';\nimport {\n  loadScript,\n  MFPrefetchCommon,\n  encodeName,\n} from '@module-federation/sdk';\n\n// Mock loadScript function from SDK\njest.mock('@module-federation/sdk', () => {\n  const originalModule = jest.requireActual('@module-federation/sdk');\n  return {\n    ...originalModule,\n    loadScript: jest.fn(() => Promise.resolve()),\n  };\n});\n\ndescribe('MF Data Prefetch', () => {\n  let prefetch: MFDataPrefetch;\n\n  const options = {\n    name: '@mf/test',\n    remoteSnapshot: {\n      buildVersion: '1.0.0',\n      globalName: 'TestGlobalName',\n    },\n  };\n  const exposeId = `${options.name}/button/${MFPrefetchCommon.identifier}`;\n\n  beforeEach(() => {\n    globalThis.__FEDERATION__.__PREFETCH__ = {\n      entryLoading: {},\n      instance: new Map(),\n      __PREFETCH_EXPORTS__: {},\n    };\n    // @ts-ignore\n    prefetch = new MFDataPrefetch(options);\n  });\n  afterAll(() => {\n    // @ts-ignore\n    delete globalThis.__FEDERATION__;\n  });\n\n  // Instance gets added to global memory on creation\n  it('adds itself to global instances on creation', () => {\n    expect(prefetch.global.instance.get(options.name)).toBe(prefetch);\n  });\n\n  // Loads entry script using loadScript from sdk\n  it('loads entry script using loadScript from sdk', async () => {\n    const url = 'testUrl'; // Url of the script to be loaded\n\n    await prefetch.loadEntry(url); // Call `loadEntry` function\n\n    // Expect that the loadScript function is called with the correct url\n    expect(loadScript).toHaveBeenCalledWith(url, expect.any(Object));\n  });\n\n  // Retrieves project exports\n  it('gets project exports', async () => {\n    const exposeExport = {\n      nyPrefetch: () => {},\n    };\n    const projectExport = {\n      [encodeName(exposeId)]: exposeExport,\n    };\n    globalThis.__FEDERATION__.__PREFETCH__.__PREFETCH_EXPORTS__[options.name] =\n      Promise.resolve(projectExport);\n\n    await prefetch.getProjectExports();\n    expect(prefetch.getExposeExports(`${options.name}/button`)).toEqual(\n      exposeExport,\n    );\n  });\n  // Prefetching with memory and executing prefetch function\n  it('executes prefetch using prefetch function with and without memory', async () => {\n    const id = options.name;\n    const functionId = 'nyPrefetch';\n    const refetchParams = 'testParams';\n    const prefetchOptions = { id: `${id}/button`, functionId, refetchParams };\n\n    // Creating a mock prefetch function\n    const executePrefetch = jest.fn(() => 'Expected Result');\n    const prefetchExports = { [functionId]: executePrefetch };\n\n    // Mock Project Exports\n    globalThis.__FEDERATION__.__PREFETCH__.__PREFETCH_EXPORTS__[id] =\n      Promise.resolve({\n        [encodeName(exposeId)]: prefetchExports,\n      });\n\n    await prefetch.getProjectExports();\n    // Call the prefetch function first time\n    let result = await prefetch.prefetch(prefetchOptions);\n\n    // Verify that executePrefetch function is correctly executed\n    expect(executePrefetch).toHaveBeenCalled();\n\n    // Clear mock function calls data\n    executePrefetch.mockClear();\n\n    // Call the prefetch function again\n    result = await prefetch.prefetch(prefetchOptions);\n\n    // Verify that executePrefetch function is NOT called this time (since the result should come from memory)\n    expect(executePrefetch).not.toHaveBeenCalled();\n\n    // Clear mock function calls data\n    executePrefetch.mockClear();\n\n    prefetch.markOutdate(prefetchOptions, true);\n\n    // Call the prefetch function first time\n    result = await prefetch.prefetch(prefetchOptions);\n\n    // Verify that executePrefetch function is correctly executed\n    expect(executePrefetch).toHaveBeenCalled();\n  });\n\n  // Checking outdate marking\n  it('checks outdate marking', () => {\n    const markOptions = { id: 'testId', functionId: 'testFunction' };\n\n    // Mark the function as outdated\n    prefetch.markOutdate(markOptions, true);\n\n    // Verify that the function is marked as outdated\n    let isOutdated = prefetch.checkOutdate(markOptions);\n    expect(isOutdated).toBe(true);\n\n    // Mark the function as up-to-date\n    prefetch.markOutdate(markOptions, false);\n\n    // Verify that the function is marked as up-to-date\n    isOutdated = prefetch.checkOutdate(markOptions);\n    expect(isOutdated).toBe(false);\n  });\n});\n"],"names":["jest","mock","originalModule","requireActual","loadScript","fn","Promise","resolve","describe","prefetch","options","name","remoteSnapshot","buildVersion","globalName","exposeId","MFPrefetchCommon","identifier","beforeEach","globalThis","__FEDERATION__","__PREFETCH__","entryLoading","instance","Map","__PREFETCH_EXPORTS__","MFDataPrefetch","afterAll","it","expect","global","get","toBe","url","loadEntry","toHaveBeenCalledWith","any","Object","exposeExport","nyPrefetch","projectExport","encodeName","getProjectExports","getExposeExports","toEqual","id","functionId","refetchParams","prefetchOptions","executePrefetch","prefetchExports","result","toHaveBeenCalled","mockClear","not","markOutdate","markOptions","isOutdated","checkOutdate"],"mappings":"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"}