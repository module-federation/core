{"version":3,"sources":["/Users/bytedance/WebstormProjects/universe/packages/data-prefetch/__tests__/babel.spec.ts"],"sourcesContent":["/// <reference types=\"jest\" />\n\nimport path from 'path';\nimport fs from 'fs';\nimport { BabelFileResult, transformFileSync } from '@babel/core';\n// @ts-ignore no use\nimport type from '@types/jest';\n\nimport babelPlugin from '../src/cli/babel';\n\nconst emptyRegexp = /\\s+/g;\ndescribe('Babel Plugin Test', () => {\n  const options = {\n    name: '@mf/test',\n    exposes: { './expose': path.resolve(__dirname, 'test') },\n  };\n\n  const testFilePath = path.join(__dirname, './test');\n\n  beforeEach(() => {\n    fs.mkdirSync(path.dirname(testFilePath), { recursive: true });\n    fs.closeSync(fs.openSync(testFilePath, 'w'));\n  });\n\n  afterEach(() => {\n    fs.unlinkSync(testFilePath);\n  });\n\n  // Check if the plugin will add the id parameter when it is not present\n  test('it adds id argument to usePrefetch call when it is absent', () => {\n    const input = `\n      import { usePrefetch } from \"@module-federation/data-prefetch/react\";\n      usePrefetch({});\n    `;\n\n    const expected = `\n      import { usePrefetch } from \"@module-federation/data-prefetch/react\";\n      usePrefetch({ id: \"@mf/test/expose\" });\n    `;\n\n    fs.writeFileSync(testFilePath, input);\n    const { code } = transformFileSync(testFilePath, {\n      plugins: [[babelPlugin, options]],\n      configFile: false,\n    }) as BabelFileResult;\n\n    expect(code?.replace(emptyRegexp, '')).toBe(\n      expected.replace(emptyRegexp, ''),\n    );\n  });\n\n  // The plugin should retain the existing id parameter in the usePrefetch call\n  test('it does not overwrite existing id argument in usePrefetch call', () => {\n    const input = `\n      import { usePrefetch } from \"@module-federation/data-prefetch/react\";\n      usePrefetch({ id: \"existingId\" });\n    `;\n\n    const expected = `\n      import { usePrefetch } from \"@module-federation/data-prefetch/react\";\n      usePrefetch({ id: \"existingId\" });\n    `;\n\n    fs.writeFileSync(testFilePath, input);\n    const { code } = transformFileSync(testFilePath, {\n      plugins: [[babelPlugin, options]],\n      configFile: false,\n      babelrc: false,\n    }) as BabelFileResult;\n\n    expect(code?.replace(emptyRegexp, '')).toBe(\n      expected.replace(emptyRegexp, ''),\n    );\n  });\n});\n"],"names":["emptyRegexp","describe","options","name","exposes","path","resolve","__dirname","testFilePath","join","beforeEach","fs","mkdirSync","dirname","recursive","closeSync","openSync","afterEach","unlinkSync","test","input","expected","writeFileSync","code","transformFileSync","plugins","babelPlugin","configFile","expect","replace","toBe","babelrc"],"mappings":"AAAA,8BAA8B;;;;;6DAEb;2DACF;sBACoC;8DAI3B;;;;;;AAExB,MAAMA,cAAc;AACpBC,SAAS,qBAAqB;IAC5B,MAAMC,UAAU;QACdC,MAAM;QACNC,SAAS;YAAE,YAAYC,aAAI,CAACC,OAAO,CAACC,WAAW;QAAQ;IACzD;IAEA,MAAMC,eAAeH,aAAI,CAACI,IAAI,CAACF,WAAW;IAE1CG,WAAW;QACTC,WAAE,CAACC,SAAS,CAACP,aAAI,CAACQ,OAAO,CAACL,eAAe;YAAEM,WAAW;QAAK;QAC3DH,WAAE,CAACI,SAAS,CAACJ,WAAE,CAACK,QAAQ,CAACR,cAAc;IACzC;IAEAS,UAAU;QACRN,WAAE,CAACO,UAAU,CAACV;IAChB;IAEA,uEAAuE;IACvEW,KAAK,6DAA6D;QAChE,MAAMC,QAAQ,CAAC;;;IAGf,CAAC;QAED,MAAMC,WAAW,CAAC;;;IAGlB,CAAC;QAEDV,WAAE,CAACW,aAAa,CAACd,cAAcY;QAC/B,MAAM,EAAEG,IAAI,EAAE,GAAGC,IAAAA,uBAAiB,EAAChB,cAAc;YAC/CiB,SAAS;gBAAC;oBAACC,cAAW;oBAAExB;iBAAQ;aAAC;YACjCyB,YAAY;QACd;QAEAC,OAAOL,MAAMM,QAAQ7B,aAAa,KAAK8B,IAAI,CACzCT,SAASQ,OAAO,CAAC7B,aAAa;IAElC;IAEA,6EAA6E;IAC7EmB,KAAK,kEAAkE;QACrE,MAAMC,QAAQ,CAAC;;;IAGf,CAAC;QAED,MAAMC,WAAW,CAAC;;;IAGlB,CAAC;QAEDV,WAAE,CAACW,aAAa,CAACd,cAAcY;QAC/B,MAAM,EAAEG,IAAI,EAAE,GAAGC,IAAAA,uBAAiB,EAAChB,cAAc;YAC/CiB,SAAS;gBAAC;oBAACC,cAAW;oBAAExB;iBAAQ;aAAC;YACjCyB,YAAY;YACZI,SAAS;QACX;QAEAH,OAAOL,MAAMM,QAAQ7B,aAAa,KAAK8B,IAAI,CACzCT,SAASQ,OAAO,CAAC7B,aAAa;IAElC;AACF"}