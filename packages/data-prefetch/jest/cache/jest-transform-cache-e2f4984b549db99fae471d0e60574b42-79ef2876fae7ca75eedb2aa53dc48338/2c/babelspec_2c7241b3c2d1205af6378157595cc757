2fe8de362b9d2834835c9cc3720eeeb4
/// <reference types="jest" />
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
const _core = require("@babel/core");
const _babel = /*#__PURE__*/ _interop_require_default(require("../src/cli/babel"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const emptyRegexp = /\s+/g;
describe('Babel Plugin Test', ()=>{
    const options = {
        name: '@mf/test',
        exposes: {
            './expose': _path.default.resolve(__dirname, 'test')
        }
    };
    const testFilePath = _path.default.join(__dirname, './test');
    beforeEach(()=>{
        _fs.default.mkdirSync(_path.default.dirname(testFilePath), {
            recursive: true
        });
        _fs.default.closeSync(_fs.default.openSync(testFilePath, 'w'));
    });
    afterEach(()=>{
        _fs.default.unlinkSync(testFilePath);
    });
    // Check if the plugin will add the id parameter when it is not present
    test('it adds id argument to usePrefetch call when it is absent', ()=>{
        const input = `
      import { usePrefetch } from "@module-federation/data-prefetch/react";
      usePrefetch({});
    `;
        const expected = `
      import { usePrefetch } from "@module-federation/data-prefetch/react";
      usePrefetch({ id: "@mf/test/expose" });
    `;
        _fs.default.writeFileSync(testFilePath, input);
        const { code } = (0, _core.transformFileSync)(testFilePath, {
            plugins: [
                [
                    _babel.default,
                    options
                ]
            ],
            configFile: false
        });
        expect(code?.replace(emptyRegexp, '')).toBe(expected.replace(emptyRegexp, ''));
    });
    // The plugin should retain the existing id parameter in the usePrefetch call
    test('it does not overwrite existing id argument in usePrefetch call', ()=>{
        const input = `
      import { usePrefetch } from "@module-federation/data-prefetch/react";
      usePrefetch({ id: "existingId" });
    `;
        const expected = `
      import { usePrefetch } from "@module-federation/data-prefetch/react";
      usePrefetch({ id: "existingId" });
    `;
        _fs.default.writeFileSync(testFilePath, input);
        const { code } = (0, _core.transformFileSync)(testFilePath, {
            plugins: [
                [
                    _babel.default,
                    options
                ]
            ],
            configFile: false,
            babelrc: false
        });
        expect(code?.replace(emptyRegexp, '')).toBe(expected.replace(emptyRegexp, ''));
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ieXRlZGFuY2UvV2Vic3Rvcm1Qcm9qZWN0cy91bml2ZXJzZS9wYWNrYWdlcy9kYXRhLXByZWZldGNoL19fdGVzdHNfXy9iYWJlbC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiamVzdFwiIC8+XG5cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCB7IEJhYmVsRmlsZVJlc3VsdCwgdHJhbnNmb3JtRmlsZVN5bmMgfSBmcm9tICdAYmFiZWwvY29yZSc7XG4vLyBAdHMtaWdub3JlIG5vIHVzZVxuaW1wb3J0IHR5cGUgZnJvbSAnQHR5cGVzL2plc3QnO1xuXG5pbXBvcnQgYmFiZWxQbHVnaW4gZnJvbSAnLi4vc3JjL2NsaS9iYWJlbCc7XG5cbmNvbnN0IGVtcHR5UmVnZXhwID0gL1xccysvZztcbmRlc2NyaWJlKCdCYWJlbCBQbHVnaW4gVGVzdCcsICgpID0+IHtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICBuYW1lOiAnQG1mL3Rlc3QnLFxuICAgIGV4cG9zZXM6IHsgJy4vZXhwb3NlJzogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ3Rlc3QnKSB9LFxuICB9O1xuXG4gIGNvbnN0IHRlc3RGaWxlUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuL3Rlc3QnKTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBmcy5ta2RpclN5bmMocGF0aC5kaXJuYW1lKHRlc3RGaWxlUGF0aCksIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIGZzLmNsb3NlU3luYyhmcy5vcGVuU3luYyh0ZXN0RmlsZVBhdGgsICd3JykpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGZzLnVubGlua1N5bmModGVzdEZpbGVQYXRoKTtcbiAgfSk7XG5cbiAgLy8gQ2hlY2sgaWYgdGhlIHBsdWdpbiB3aWxsIGFkZCB0aGUgaWQgcGFyYW1ldGVyIHdoZW4gaXQgaXMgbm90IHByZXNlbnRcbiAgdGVzdCgnaXQgYWRkcyBpZCBhcmd1bWVudCB0byB1c2VQcmVmZXRjaCBjYWxsIHdoZW4gaXQgaXMgYWJzZW50JywgKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0gYFxuICAgICAgaW1wb3J0IHsgdXNlUHJlZmV0Y2ggfSBmcm9tIFwiQG1vZHVsZS1mZWRlcmF0aW9uL2RhdGEtcHJlZmV0Y2gvcmVhY3RcIjtcbiAgICAgIHVzZVByZWZldGNoKHt9KTtcbiAgICBgO1xuXG4gICAgY29uc3QgZXhwZWN0ZWQgPSBgXG4gICAgICBpbXBvcnQgeyB1c2VQcmVmZXRjaCB9IGZyb20gXCJAbW9kdWxlLWZlZGVyYXRpb24vZGF0YS1wcmVmZXRjaC9yZWFjdFwiO1xuICAgICAgdXNlUHJlZmV0Y2goeyBpZDogXCJAbWYvdGVzdC9leHBvc2VcIiB9KTtcbiAgICBgO1xuXG4gICAgZnMud3JpdGVGaWxlU3luYyh0ZXN0RmlsZVBhdGgsIGlucHV0KTtcbiAgICBjb25zdCB7IGNvZGUgfSA9IHRyYW5zZm9ybUZpbGVTeW5jKHRlc3RGaWxlUGF0aCwge1xuICAgICAgcGx1Z2luczogW1tiYWJlbFBsdWdpbiwgb3B0aW9uc11dLFxuICAgICAgY29uZmlnRmlsZTogZmFsc2UsXG4gICAgfSkgYXMgQmFiZWxGaWxlUmVzdWx0O1xuXG4gICAgZXhwZWN0KGNvZGU/LnJlcGxhY2UoZW1wdHlSZWdleHAsICcnKSkudG9CZShcbiAgICAgIGV4cGVjdGVkLnJlcGxhY2UoZW1wdHlSZWdleHAsICcnKSxcbiAgICApO1xuICB9KTtcblxuICAvLyBUaGUgcGx1Z2luIHNob3VsZCByZXRhaW4gdGhlIGV4aXN0aW5nIGlkIHBhcmFtZXRlciBpbiB0aGUgdXNlUHJlZmV0Y2ggY2FsbFxuICB0ZXN0KCdpdCBkb2VzIG5vdCBvdmVyd3JpdGUgZXhpc3RpbmcgaWQgYXJndW1lbnQgaW4gdXNlUHJlZmV0Y2ggY2FsbCcsICgpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IGBcbiAgICAgIGltcG9ydCB7IHVzZVByZWZldGNoIH0gZnJvbSBcIkBtb2R1bGUtZmVkZXJhdGlvbi9kYXRhLXByZWZldGNoL3JlYWN0XCI7XG4gICAgICB1c2VQcmVmZXRjaCh7IGlkOiBcImV4aXN0aW5nSWRcIiB9KTtcbiAgICBgO1xuXG4gICAgY29uc3QgZXhwZWN0ZWQgPSBgXG4gICAgICBpbXBvcnQgeyB1c2VQcmVmZXRjaCB9IGZyb20gXCJAbW9kdWxlLWZlZGVyYXRpb24vZGF0YS1wcmVmZXRjaC9yZWFjdFwiO1xuICAgICAgdXNlUHJlZmV0Y2goeyBpZDogXCJleGlzdGluZ0lkXCIgfSk7XG4gICAgYDtcblxuICAgIGZzLndyaXRlRmlsZVN5bmModGVzdEZpbGVQYXRoLCBpbnB1dCk7XG4gICAgY29uc3QgeyBjb2RlIH0gPSB0cmFuc2Zvcm1GaWxlU3luYyh0ZXN0RmlsZVBhdGgsIHtcbiAgICAgIHBsdWdpbnM6IFtbYmFiZWxQbHVnaW4sIG9wdGlvbnNdXSxcbiAgICAgIGNvbmZpZ0ZpbGU6IGZhbHNlLFxuICAgICAgYmFiZWxyYzogZmFsc2UsXG4gICAgfSkgYXMgQmFiZWxGaWxlUmVzdWx0O1xuXG4gICAgZXhwZWN0KGNvZGU/LnJlcGxhY2UoZW1wdHlSZWdleHAsICcnKSkudG9CZShcbiAgICAgIGV4cGVjdGVkLnJlcGxhY2UoZW1wdHlSZWdleHAsICcnKSxcbiAgICApO1xuICB9KTtcbn0pO1xuIl0sIm5hbWVzIjpbImVtcHR5UmVnZXhwIiwiZGVzY3JpYmUiLCJvcHRpb25zIiwibmFtZSIsImV4cG9zZXMiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsInRlc3RGaWxlUGF0aCIsImpvaW4iLCJiZWZvcmVFYWNoIiwiZnMiLCJta2RpclN5bmMiLCJkaXJuYW1lIiwicmVjdXJzaXZlIiwiY2xvc2VTeW5jIiwib3BlblN5bmMiLCJhZnRlckVhY2giLCJ1bmxpbmtTeW5jIiwidGVzdCIsImlucHV0IiwiZXhwZWN0ZWQiLCJ3cml0ZUZpbGVTeW5jIiwiY29kZSIsInRyYW5zZm9ybUZpbGVTeW5jIiwicGx1Z2lucyIsImJhYmVsUGx1Z2luIiwiY29uZmlnRmlsZSIsImV4cGVjdCIsInJlcGxhY2UiLCJ0b0JlIiwiYmFiZWxyYyJdLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCOzs7Ozs2REFFYjsyREFDRjtzQkFDb0M7OERBSTNCOzs7Ozs7QUFFeEIsTUFBTUEsY0FBYztBQUNwQkMsU0FBUyxxQkFBcUI7SUFDNUIsTUFBTUMsVUFBVTtRQUNkQyxNQUFNO1FBQ05DLFNBQVM7WUFBRSxZQUFZQyxhQUFJLENBQUNDLE9BQU8sQ0FBQ0MsV0FBVztRQUFRO0lBQ3pEO0lBRUEsTUFBTUMsZUFBZUgsYUFBSSxDQUFDSSxJQUFJLENBQUNGLFdBQVc7SUFFMUNHLFdBQVc7UUFDVEMsV0FBRSxDQUFDQyxTQUFTLENBQUNQLGFBQUksQ0FBQ1EsT0FBTyxDQUFDTCxlQUFlO1lBQUVNLFdBQVc7UUFBSztRQUMzREgsV0FBRSxDQUFDSSxTQUFTLENBQUNKLFdBQUUsQ0FBQ0ssUUFBUSxDQUFDUixjQUFjO0lBQ3pDO0lBRUFTLFVBQVU7UUFDUk4sV0FBRSxDQUFDTyxVQUFVLENBQUNWO0lBQ2hCO0lBRUEsdUVBQXVFO0lBQ3ZFVyxLQUFLLDZEQUE2RDtRQUNoRSxNQUFNQyxRQUFRLENBQUM7OztJQUdmLENBQUM7UUFFRCxNQUFNQyxXQUFXLENBQUM7OztJQUdsQixDQUFDO1FBRURWLFdBQUUsQ0FBQ1csYUFBYSxDQUFDZCxjQUFjWTtRQUMvQixNQUFNLEVBQUVHLElBQUksRUFBRSxHQUFHQyxJQUFBQSx1QkFBaUIsRUFBQ2hCLGNBQWM7WUFDL0NpQixTQUFTO2dCQUFDO29CQUFDQyxjQUFXO29CQUFFeEI7aUJBQVE7YUFBQztZQUNqQ3lCLFlBQVk7UUFDZDtRQUVBQyxPQUFPTCxNQUFNTSxRQUFRN0IsYUFBYSxLQUFLOEIsSUFBSSxDQUN6Q1QsU0FBU1EsT0FBTyxDQUFDN0IsYUFBYTtJQUVsQztJQUVBLDZFQUE2RTtJQUM3RW1CLEtBQUssa0VBQWtFO1FBQ3JFLE1BQU1DLFFBQVEsQ0FBQzs7O0lBR2YsQ0FBQztRQUVELE1BQU1DLFdBQVcsQ0FBQzs7O0lBR2xCLENBQUM7UUFFRFYsV0FBRSxDQUFDVyxhQUFhLENBQUNkLGNBQWNZO1FBQy9CLE1BQU0sRUFBRUcsSUFBSSxFQUFFLEdBQUdDLElBQUFBLHVCQUFpQixFQUFDaEIsY0FBYztZQUMvQ2lCLFNBQVM7Z0JBQUM7b0JBQUNDLGNBQVc7b0JBQUV4QjtpQkFBUTthQUFDO1lBQ2pDeUIsWUFBWTtZQUNaSSxTQUFTO1FBQ1g7UUFFQUgsT0FBT0wsTUFBTU0sUUFBUTdCLGFBQWEsS0FBSzhCLElBQUksQ0FDekNULFNBQVNRLE9BQU8sQ0FBQzdCLGFBQWE7SUFFbEM7QUFDRiJ9