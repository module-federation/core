cfa99634871673a4ac3d1aecafa301c6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "usePrefetch", {
    enumerable: true,
    get: function() {
        return usePrefetch;
    }
});
const _react = require("react");
const _logger = /*#__PURE__*/ _interop_require_default(require("../logger"));
const _prefetch = require("../prefetch");
const _universal = require("../universal");
const _runtimeutils = require("../common/runtime-utils");
const _utils = require("./utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const usePrefetch = (options)=>{
    const isFirstMounted = (0, _utils.useFirstMounted)();
    if (isFirstMounted) {
        const startTiming = performance.now();
        _logger.default.info(`2. Start Get Prefetch Data: ${options.id} - ${options.functionId || 'default'} - ${startTiming}`);
    }
    const { id, functionId, deferId } = options;
    const prefetchInfo = {
        id,
        functionId
    };
    const mfScope = (0, _runtimeutils.getScope)();
    let state;
    const prefetchResult = (0, _universal.prefetch)(options);
    if (deferId) {
        if (prefetchResult instanceof Promise) {
            state = prefetchResult.then((deferredData)=>deferredData.data[deferId]);
        } else {
            state = prefetchResult.data[deferId];
        }
    } else {
        state = prefetchResult;
    }
    const [prefetchState, setPrefetchState] = (0, _react.useState)(state);
    const prefetchInstance = _prefetch.MFDataPrefetch.getInstance(mfScope);
    (0, _react.useEffect)(()=>{
        const useEffectTiming = performance.now();
        _logger.default.info(`3. Start Execute UseEffect: ${options.id} - ${options.functionId || 'default'} - ${useEffectTiming}`);
        return ()=>{
            prefetchInstance?.markOutdate(prefetchInfo, true);
        };
    }, []);
    const refreshExecutor = (refetchParams)=>{
        const refetchOptions = {
            ...options
        };
        if (refetchParams) {
            refetchOptions.refetchParams = refetchParams;
        }
        prefetchInstance?.markOutdate(prefetchInfo, true);
        const newVal = (0, _universal.prefetch)(refetchOptions);
        let newState;
        if (deferId) {
            if (newVal instanceof Promise) {
                newState = newVal.then((deferredData)=>deferredData.data[deferId]);
            } else {
                newState = newVal.data[deferId];
            }
        } else {
            newState = newVal;
        }
        setPrefetchState(newState);
    };
    return [
        prefetchState,
        refreshExecutor
    ];
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ieXRlZGFuY2UvV2Vic3Rvcm1Qcm9qZWN0cy91bml2ZXJzZS9wYWNrYWdlcy9kYXRhLXByZWZldGNoL3NyYy9yZWFjdC9ob29rcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBkZWZlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5cbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IE1GRGF0YVByZWZldGNoLCB0eXBlIHByZWZldGNoT3B0aW9ucyB9IGZyb20gJy4uL3ByZWZldGNoJztcbmltcG9ydCB7IHByZWZldGNoIH0gZnJvbSAnLi4vdW5pdmVyc2FsJztcbmltcG9ydCB7IGdldFNjb3BlIH0gZnJvbSAnLi4vY29tbW9uL3J1bnRpbWUtdXRpbHMnO1xuaW1wb3J0IHsgdXNlRmlyc3RNb3VudGVkIH0gZnJvbSAnLi91dGlscyc7XG5cbnR5cGUgcmVmZXRjaFBhcmFtcyA9IGFueTtcbnR5cGUgRGVmZXJyZWREYXRhID0gUmV0dXJuVHlwZTx0eXBlb2YgZGVmZXI+O1xudHlwZSBwcmVmZXRjaFJldHVyblR5cGU8VD4gPSBbXG4gIFByb21pc2U8VD4sXG4gIChyZWZldGNoUGFyYW1zPzogcmVmZXRjaFBhcmFtcykgPT4gdm9pZCxcbl07XG5cbnR5cGUgVXNlUHJlZmV0Y2hPcHRpb25zID0gcHJlZmV0Y2hPcHRpb25zICYge1xuICBkZWZlcklkPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZVByZWZldGNoID0gPFQ+KFxuICBvcHRpb25zOiBVc2VQcmVmZXRjaE9wdGlvbnMsXG4pOiBwcmVmZXRjaFJldHVyblR5cGU8VD4gPT4ge1xuICBjb25zdCBpc0ZpcnN0TW91bnRlZCA9IHVzZUZpcnN0TW91bnRlZCgpO1xuICBpZiAoaXNGaXJzdE1vdW50ZWQpIHtcbiAgICBjb25zdCBzdGFydFRpbWluZyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIGxvZ2dlci5pbmZvKFxuICAgICAgYDIuIFN0YXJ0IEdldCBQcmVmZXRjaCBEYXRhOiAke29wdGlvbnMuaWR9IC0gJHtcbiAgICAgICAgb3B0aW9ucy5mdW5jdGlvbklkIHx8ICdkZWZhdWx0J1xuICAgICAgfSAtICR7c3RhcnRUaW1pbmd9YCxcbiAgICApO1xuICB9XG4gIGNvbnN0IHsgaWQsIGZ1bmN0aW9uSWQsIGRlZmVySWQgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHByZWZldGNoSW5mbyA9IHtcbiAgICBpZCxcbiAgICBmdW5jdGlvbklkLFxuICB9O1xuICBjb25zdCBtZlNjb3BlID0gZ2V0U2NvcGUoKTtcblxuICBsZXQgc3RhdGU7XG4gIGNvbnN0IHByZWZldGNoUmVzdWx0ID0gcHJlZmV0Y2gob3B0aW9ucyk7XG4gIGlmIChkZWZlcklkKSB7XG4gICAgaWYgKHByZWZldGNoUmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgc3RhdGUgPSAocHJlZmV0Y2hSZXN1bHQgYXMgUHJvbWlzZTxEZWZlcnJlZERhdGE+KS50aGVuKFxuICAgICAgICAoZGVmZXJyZWREYXRhKSA9PiBkZWZlcnJlZERhdGEuZGF0YVtkZWZlcklkXSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlID0gKHByZWZldGNoUmVzdWx0IGFzIERlZmVycmVkRGF0YSkuZGF0YVtkZWZlcklkXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUgPSBwcmVmZXRjaFJlc3VsdDtcbiAgfVxuICBjb25zdCBbcHJlZmV0Y2hTdGF0ZSwgc2V0UHJlZmV0Y2hTdGF0ZV0gPSB1c2VTdGF0ZTxQcm9taXNlPFQ+PihcbiAgICBzdGF0ZSBhcyBQcm9taXNlPFQ+LFxuICApO1xuICBjb25zdCBwcmVmZXRjaEluc3RhbmNlID0gTUZEYXRhUHJlZmV0Y2guZ2V0SW5zdGFuY2UobWZTY29wZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB1c2VFZmZlY3RUaW1pbmcgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICBsb2dnZXIuaW5mbyhcbiAgICAgIGAzLiBTdGFydCBFeGVjdXRlIFVzZUVmZmVjdDogJHtvcHRpb25zLmlkfSAtICR7XG4gICAgICAgIG9wdGlvbnMuZnVuY3Rpb25JZCB8fCAnZGVmYXVsdCdcbiAgICAgIH0gLSAke3VzZUVmZmVjdFRpbWluZ31gLFxuICAgICk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgcHJlZmV0Y2hJbnN0YW5jZT8ubWFya091dGRhdGUocHJlZmV0Y2hJbmZvLCB0cnVlKTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgY29uc3QgcmVmcmVzaEV4ZWN1dG9yID0gKHJlZmV0Y2hQYXJhbXM/OiByZWZldGNoUGFyYW1zKSA9PiB7XG4gICAgY29uc3QgcmVmZXRjaE9wdGlvbnMgPSB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgIH07XG4gICAgaWYgKHJlZmV0Y2hQYXJhbXMpIHtcbiAgICAgIHJlZmV0Y2hPcHRpb25zLnJlZmV0Y2hQYXJhbXMgPSByZWZldGNoUGFyYW1zO1xuICAgIH1cbiAgICBwcmVmZXRjaEluc3RhbmNlPy5tYXJrT3V0ZGF0ZShwcmVmZXRjaEluZm8sIHRydWUpO1xuICAgIGNvbnN0IG5ld1ZhbCA9IHByZWZldGNoKHJlZmV0Y2hPcHRpb25zKSBhcyBQcm9taXNlPERlZmVycmVkRGF0YT47XG4gICAgbGV0IG5ld1N0YXRlO1xuICAgIGlmIChkZWZlcklkKSB7XG4gICAgICBpZiAobmV3VmFsIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICBuZXdTdGF0ZSA9IG5ld1ZhbC50aGVuKChkZWZlcnJlZERhdGEpID0+IGRlZmVycmVkRGF0YS5kYXRhW2RlZmVySWRdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1N0YXRlID0gKG5ld1ZhbCBhcyBEZWZlcnJlZERhdGEpLmRhdGFbZGVmZXJJZF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0YXRlID0gbmV3VmFsO1xuICAgIH1cblxuICAgIHNldFByZWZldGNoU3RhdGUobmV3U3RhdGUgYXMgUHJvbWlzZTxUPik7XG4gIH07XG5cbiAgcmV0dXJuIFtwcmVmZXRjaFN0YXRlLCByZWZyZXNoRXhlY3V0b3JdO1xufTtcbiJdLCJuYW1lcyI6WyJ1c2VQcmVmZXRjaCIsIm9wdGlvbnMiLCJpc0ZpcnN0TW91bnRlZCIsInVzZUZpcnN0TW91bnRlZCIsInN0YXJ0VGltaW5nIiwicGVyZm9ybWFuY2UiLCJub3ciLCJsb2dnZXIiLCJpbmZvIiwiaWQiLCJmdW5jdGlvbklkIiwiZGVmZXJJZCIsInByZWZldGNoSW5mbyIsIm1mU2NvcGUiLCJnZXRTY29wZSIsInN0YXRlIiwicHJlZmV0Y2hSZXN1bHQiLCJwcmVmZXRjaCIsIlByb21pc2UiLCJ0aGVuIiwiZGVmZXJyZWREYXRhIiwiZGF0YSIsInByZWZldGNoU3RhdGUiLCJzZXRQcmVmZXRjaFN0YXRlIiwidXNlU3RhdGUiLCJwcmVmZXRjaEluc3RhbmNlIiwiTUZEYXRhUHJlZmV0Y2giLCJnZXRJbnN0YW5jZSIsInVzZUVmZmVjdCIsInVzZUVmZmVjdFRpbWluZyIsIm1hcmtPdXRkYXRlIiwicmVmcmVzaEV4ZWN1dG9yIiwicmVmZXRjaFBhcmFtcyIsInJlZmV0Y2hPcHRpb25zIiwibmV3VmFsIiwibmV3U3RhdGUiXSwibWFwcGluZ3MiOiI7Ozs7K0JBb0JhQTs7O2VBQUFBOzs7dUJBcEJ1QjsrREFHakI7MEJBQ2tDOzJCQUM1Qjs4QkFDQTt1QkFDTzs7Ozs7O0FBYXpCLE1BQU1BLGNBQWMsQ0FDekJDO0lBRUEsTUFBTUMsaUJBQWlCQyxJQUFBQSxzQkFBZTtJQUN0QyxJQUFJRCxnQkFBZ0I7UUFDbEIsTUFBTUUsY0FBY0MsWUFBWUMsR0FBRztRQUNuQ0MsZUFBTSxDQUFDQyxJQUFJLENBQ1QsQ0FBQyw0QkFBNEIsRUFBRVAsUUFBUVEsRUFBRSxDQUFDLEdBQUcsRUFDM0NSLFFBQVFTLFVBQVUsSUFBSSxVQUN2QixHQUFHLEVBQUVOLFlBQVksQ0FBQztJQUV2QjtJQUNBLE1BQU0sRUFBRUssRUFBRSxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRSxHQUFHVjtJQUNwQyxNQUFNVyxlQUFlO1FBQ25CSDtRQUNBQztJQUNGO0lBQ0EsTUFBTUcsVUFBVUMsSUFBQUEsc0JBQVE7SUFFeEIsSUFBSUM7SUFDSixNQUFNQyxpQkFBaUJDLElBQUFBLG1CQUFRLEVBQUNoQjtJQUNoQyxJQUFJVSxTQUFTO1FBQ1gsSUFBSUssMEJBQTBCRSxTQUFTO1lBQ3JDSCxRQUFRLEFBQUNDLGVBQXlDRyxJQUFJLENBQ3BELENBQUNDLGVBQWlCQSxhQUFhQyxJQUFJLENBQUNWLFFBQVE7UUFFaEQsT0FBTztZQUNMSSxRQUFRLEFBQUNDLGVBQWdDSyxJQUFJLENBQUNWLFFBQVE7UUFDeEQ7SUFDRixPQUFPO1FBQ0xJLFFBQVFDO0lBQ1Y7SUFDQSxNQUFNLENBQUNNLGVBQWVDLGlCQUFpQixHQUFHQyxJQUFBQSxlQUFRLEVBQ2hEVDtJQUVGLE1BQU1VLG1CQUFtQkMsd0JBQWMsQ0FBQ0MsV0FBVyxDQUFDZDtJQUVwRGUsSUFBQUEsZ0JBQVMsRUFBQztRQUNSLE1BQU1DLGtCQUFrQnhCLFlBQVlDLEdBQUc7UUFDdkNDLGVBQU0sQ0FBQ0MsSUFBSSxDQUNULENBQUMsNEJBQTRCLEVBQUVQLFFBQVFRLEVBQUUsQ0FBQyxHQUFHLEVBQzNDUixRQUFRUyxVQUFVLElBQUksVUFDdkIsR0FBRyxFQUFFbUIsZ0JBQWdCLENBQUM7UUFHekIsT0FBTztZQUNMSixrQkFBa0JLLFlBQVlsQixjQUFjO1FBQzlDO0lBQ0YsR0FBRyxFQUFFO0lBRUwsTUFBTW1CLGtCQUFrQixDQUFDQztRQUN2QixNQUFNQyxpQkFBaUI7WUFDckIsR0FBR2hDLE9BQU87UUFDWjtRQUNBLElBQUkrQixlQUFlO1lBQ2pCQyxlQUFlRCxhQUFhLEdBQUdBO1FBQ2pDO1FBQ0FQLGtCQUFrQkssWUFBWWxCLGNBQWM7UUFDNUMsTUFBTXNCLFNBQVNqQixJQUFBQSxtQkFBUSxFQUFDZ0I7UUFDeEIsSUFBSUU7UUFDSixJQUFJeEIsU0FBUztZQUNYLElBQUl1QixrQkFBa0JoQixTQUFTO2dCQUM3QmlCLFdBQVdELE9BQU9mLElBQUksQ0FBQyxDQUFDQyxlQUFpQkEsYUFBYUMsSUFBSSxDQUFDVixRQUFRO1lBQ3JFLE9BQU87Z0JBQ0x3QixXQUFXLEFBQUNELE9BQXdCYixJQUFJLENBQUNWLFFBQVE7WUFDbkQ7UUFDRixPQUFPO1lBQ0x3QixXQUFXRDtRQUNiO1FBRUFYLGlCQUFpQlk7SUFDbkI7SUFFQSxPQUFPO1FBQUNiO1FBQWVTO0tBQWdCO0FBQ3pDIn0=