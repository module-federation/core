{"version":3,"sources":["/Users/bytedance/WebstormProjects/universe/packages/data-prefetch/__tests__/react.spec.ts"],"sourcesContent":["import { FederationHost } from '@module-federation/runtime';\nimport { renderHook, act } from '@testing-library/react-hooks';\nimport * as ModuleFederationSDK from '@module-federation/sdk';\nimport { usePrefetch } from '../src/react';\nimport { MFDataPrefetch } from '../src/prefetch';\n\nconst mockLoadScript = jest.spyOn(ModuleFederationSDK, 'loadScript');\nmockLoadScript.mockImplementation(() => Promise.resolve());\n\ndescribe('usePrefetch', () => {\n  // Mock prefetch function\n  global.fetch = jest.fn(() =>\n    Promise.resolve({\n      ok: true,\n      status: 200,\n      statusText: 'OK',\n      redirected: false,\n      type: 'basic',\n      url: '',\n      clone: jest.fn(),\n      headers: new Headers(),\n      body: null,\n      bodyUsed: false,\n      text: () => Promise.resolve(JSON.stringify({ data: 'testData' })),\n      json: () => Promise.resolve({ data: 'testData' }),\n      formData: () => Promise.resolve(new FormData()),\n      arrayBuffer: () => Promise.resolve(new ArrayBuffer(0)),\n      blob: () => Promise.resolve(new Blob()),\n    }),\n  );\n\n  let prefetch: MFDataPrefetch;\n\n  const options = {\n    // Options that will be passed to the `MFDataPrefetch` constructor\n    name: '@mf/test',\n    remoteSnapshot: {\n      buildVersion: '1.0.0',\n      globalName: 'TestGlobalName',\n    },\n  };\n  const testData = 'testData';\n  const newTestData = 'newTestData';\n  const functionId = 'testPrefetch';\n  const executePrefetch = jest.fn((params: string) =>\n    Promise.resolve(params ? params : testData),\n  );\n\n  new FederationHost({\n    name: options.name,\n    remotes: []\n  });\n  beforeEach(() => {\n    globalThis.__FEDERATION__.__PREFETCH__ = {\n      entryLoading: {},\n      instance: new Map(),\n      __PREFETCH_EXPORTS__: {},\n    };\n    // @ts-ignore\n    prefetch = new MFDataPrefetch(options); // Create a new instance of `MFDataPrefetch` class before each test\n\n    const exposeExport = {\n      [functionId]: executePrefetch,\n    };\n    const exposeId = `${options.name}/button/${ModuleFederationSDK.MFPrefetchCommon.identifier}`;\n    const projectExport = {\n      [ModuleFederationSDK.encodeName(exposeId)]: exposeExport,\n    };\n    globalThis.__FEDERATION__.__PREFETCH__.__PREFETCH_EXPORTS__[options.name] =\n      Promise.resolve(projectExport);\n  });\n\n  afterEach(() => {\n    executePrefetch.mockClear();\n    mockLoadScript.mockRestore();\n  });\n\n  afterAll(() => {\n    // @ts-ignore\n    delete globalThis.__FEDERATION__;\n  });\n\n  it('should prefetch data on first mount', async () => {\n    const { result } = renderHook(() =>\n      usePrefetch({ id: `${options.name}/button`, functionId }),\n    );\n    await result.current[0];\n    expect(executePrefetch).toHaveBeenCalled();\n    // Verify the prefechState\n    expect(result.current[0]).resolves.toEqual(testData);\n  });\n\n  it('should refetch data when refreshExecutor is called', async () => {\n    const { result } = renderHook(() =>\n      usePrefetch({ id: `${options.name}/button`, functionId }),\n    );\n\n    await result.current[0];\n    expect(executePrefetch).toHaveBeenCalled();\n    executePrefetch.mockClear();\n    const { result: newCallResult } = renderHook(() =>\n      usePrefetch({ id: `${options.name}/button`, functionId }),\n    );\n    await newCallResult.current[0];\n    expect(executePrefetch).not.toHaveBeenCalled();\n    // Call refreshExecutor\n    act(() => {\n      result.current[1](newTestData);\n    });\n\n    expect(executePrefetch).toHaveBeenCalled();\n    // // Verify the prefetchState after refetch\n    expect(result.current[0]).resolves.toEqual(newTestData);\n  });\n});\n"],"names":["mockLoadScript","jest","spyOn","ModuleFederationSDK","mockImplementation","Promise","resolve","describe","global","fetch","fn","ok","status","statusText","redirected","type","url","clone","headers","Headers","body","bodyUsed","text","JSON","stringify","data","json","formData","FormData","arrayBuffer","ArrayBuffer","blob","Blob","prefetch","options","name","remoteSnapshot","buildVersion","globalName","testData","newTestData","functionId","executePrefetch","params","FederationHost","remotes","beforeEach","globalThis","__FEDERATION__","__PREFETCH__","entryLoading","instance","Map","__PREFETCH_EXPORTS__","MFDataPrefetch","exposeExport","exposeId","MFPrefetchCommon","identifier","projectExport","encodeName","afterEach","mockClear","mockRestore","afterAll","it","result","renderHook","usePrefetch","id","current","expect","toHaveBeenCalled","resolves","toEqual","newCallResult","not","act"],"mappings":"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"}