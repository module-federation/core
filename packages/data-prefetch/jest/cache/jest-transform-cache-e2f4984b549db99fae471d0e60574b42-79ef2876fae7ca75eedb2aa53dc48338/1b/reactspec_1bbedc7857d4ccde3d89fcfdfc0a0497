0c4376fcdccc4d4d721b9756130d2ea5
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _runtime = require("@module-federation/runtime");
const _reacthooks = require("@testing-library/react-hooks");
const _sdk = /*#__PURE__*/ _interop_require_wildcard(require("@module-federation/sdk"));
const _react = require("../src/react");
const _prefetch = require("../src/prefetch");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const mockLoadScript = jest.spyOn(_sdk, 'loadScript');
mockLoadScript.mockImplementation(()=>Promise.resolve());
describe('usePrefetch', ()=>{
    // Mock prefetch function
    global.fetch = jest.fn(()=>Promise.resolve({
            ok: true,
            status: 200,
            statusText: 'OK',
            redirected: false,
            type: 'basic',
            url: '',
            clone: jest.fn(),
            headers: new Headers(),
            body: null,
            bodyUsed: false,
            text: ()=>Promise.resolve(JSON.stringify({
                    data: 'testData'
                })),
            json: ()=>Promise.resolve({
                    data: 'testData'
                }),
            formData: ()=>Promise.resolve(new FormData()),
            arrayBuffer: ()=>Promise.resolve(new ArrayBuffer(0)),
            blob: ()=>Promise.resolve(new Blob())
        }));
    let prefetch;
    const options = {
        // Options that will be passed to the `MFDataPrefetch` constructor
        name: '@mf/test',
        remoteSnapshot: {
            buildVersion: '1.0.0',
            globalName: 'TestGlobalName'
        }
    };
    const testData = 'testData';
    const newTestData = 'newTestData';
    const functionId = 'testPrefetch';
    const executePrefetch = jest.fn((params)=>Promise.resolve(params ? params : testData));
    beforeEach(()=>{
        new _runtime.FederationHost({
            name: options.name,
            remotes: []
        });
        globalThis.__FEDERATION__.__PREFETCH__ = {
            entryLoading: {},
            instance: new Map(),
            __PREFETCH_EXPORTS__: {}
        };
        // @ts-ignore
        prefetch = new _prefetch.MFDataPrefetch(options); // Create a new instance of `MFDataPrefetch` class before each test
        const exposeExport = {
            [functionId]: executePrefetch
        };
        const exposeId = `${options.name}/button/${_sdk.MFPrefetchCommon.identifier}`;
        const projectExport = {
            [_sdk.encodeName(exposeId)]: exposeExport
        };
        globalThis.__FEDERATION__.__PREFETCH__.__PREFETCH_EXPORTS__[options.name] = Promise.resolve(projectExport);
    });
    afterEach(()=>{
        executePrefetch.mockClear();
        mockLoadScript.mockRestore();
    });
    afterAll(()=>{
        // @ts-ignore
        delete globalThis.__FEDERATION__;
    });
    it('should prefetch data on first mount', async ()=>{
        const { result } = (0, _reacthooks.renderHook)(()=>(0, _react.usePrefetch)({
                id: `${options.name}/button`,
                functionId
            }));
        await result.current[0];
        expect(executePrefetch).toHaveBeenCalled();
        // Verify the prefechState
        expect(result.current[0]).resolves.toEqual(testData);
    });
    it('should refetch data when refreshExecutor is called', async ()=>{
        const { result } = (0, _reacthooks.renderHook)(()=>(0, _react.usePrefetch)({
                id: `${options.name}/button`,
                functionId
            }));
        await result.current[0];
        expect(executePrefetch).toHaveBeenCalled();
        executePrefetch.mockClear();
        const { result: newCallResult } = (0, _reacthooks.renderHook)(()=>(0, _react.usePrefetch)({
                id: `${options.name}/button`,
                functionId
            }));
        await newCallResult.current[0];
        expect(executePrefetch).not.toHaveBeenCalled();
        // Call refreshExecutor
        (0, _reacthooks.act)(()=>{
            result.current[1](newTestData);
        });
        expect(executePrefetch).toHaveBeenCalled();
        // // Verify the prefetchState after refetch
        expect(result.current[0]).resolves.toEqual(newTestData);
    });
});

//# sourceMappingURL=data:application/json;base64,